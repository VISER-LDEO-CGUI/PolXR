<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fusion.Runtime</name>
    </assembly>
    <members>
        <member name="M:Fusion.Allocator.CanAllocSizeAssert_Temp(System.Int32)">
            <summary>
            Check size of bytes to be allocated
            </summary>
            <param name="size">Number of bytes to be allocated</param>
            <returns>True if size is valid, false otherwise.</returns>
            <exception cref="T:Fusion.AssertException">If size is less than 1</exception>
            <exception cref="T:Fusion.AssertException">If size is bigger than <see cref="P:Fusion.Allocator.Config.BlockByteSize"/></exception>
        </member>
        <member name="T:Fusion.PageSizes">
            <summary>
            Page Bit Shift Lookup Table
            </summary>
        </member>
        <member name="T:Fusion.AccuracyAttribute">
            <summary>
            Additional companion attribute to NetworkedAttribute, which indicates how floats should be compressed.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyAttribute.#ctor(System.Double)">
            <summary>
            Constructor new accuracy.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyAttribute.#ctor(System.Single)">
            <summary>
            Constructor new accuracy.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyAttribute.#ctor(System.String)">
            <summary>
            Constructor that takes a named <see cref="!:AccuracyDefaults"/> constant.
            Accuracy for this property will be acquired from the <see cref="!:NetworkProjectConfig.AccuracyDefaults"/> settings.
            </summary>
            <param name="defaultAccuracyTag"></param>
        </member>
        <member name="T:Fusion.NetworkedAttribute">
            <summary>
            <para>
            Flags a property of <see cref="T:Fusion.NetworkBehaviour"/> for network state synchronization. 
            The property should have empty get and set defines, which will automatically be replaced with networking code via IL Weaving.
            OnChanged can be assigned with the name of a method in the same NetworkBehaviour. 
            The named method will get called whenever this property value has been changed by the State Authority.
            <code>
            | [Networked(OnDataReceived = nameof(MyCallbackMethod)]<br></br>
            | public int MyProperty { get; set; }
            |
            | protected static void MyCallbackMethod(Changed&lt;ChangedCallbackParent&gt; changed) {
            |   changed.LoadNew();
            |   var newval = changed.Behaviour.MyProperty;
            |   changed.LoadOld();
            |   var oldval = changed.Behaviour.MyProperty;
            |   Debug.Log($"Changed from {oldval} to {newval}");
            | }
            </code>
            </para>
            <para>
            Inside of INetworkStruct, do not use AutoProperties (get; set;), as these will introduce managed types into the struct, which are not allowed. Instead use '=> default'.
            <code>
            | [Networked]<br></br>
            | public string StringProp { get => default; set { } }
            </code>
            </para>
            </summary>
        </member>
        <member name="P:Fusion.NetworkedAttribute.Default">
            <summary>
            Name of the field that holds the default value for this networked property.
            </summary>
        </member>
        <member name="M:Fusion.NetworkedAttribute.#ctor">
            <summary>
            Default constructor for NetworkedAttribute
            </summary>
        </member>
        <member name="P:Fusion.NetworkSerializeMethodAttribute.MaxSize">
            <summary>
            If set, this changes expected Wrap method signature to int Name(NetworkRunner, T, byte*) and Unwrap to int Name(NetworkRunner, byte*, ref T).
            In both cases, the result is the number of bytes written/read and can not be greater than what's declared here.
            </summary>
        </member>
        <member name="T:Fusion.NetworkStructWeavedAttribute">
            <summary>
            Describes the total number of WORDs a <see cref="!:Fusion.INetworkedStruct"/> uses.
            </summary>
        </member>
        <member name="T:Fusion.NormalizedRectAttribute">
            <summary>
            Enables a special inspector drawer for Unity Rect type, specially designed for editing RectTransforms using normalized values.
            </summary>
        </member>
        <member name="M:Fusion.NormalizedRectAttribute.#ctor(System.Boolean,System.Single)">
            <summary>
            Constructor for <see cref="T:Fusion.NormalizedRectAttribute"/>. InvertY inverts Y handling, for RectTransforms which treat lowerRight as origin, rather than upper left.
            </summary>
            <param name="invertY"></param>
            <param name="aspectRatio">Expressed as Width/Height, this defines the ratio of the box shown in the inspector. Value of 0 indicates game window resolution will be used.</param>
        </member>
        <member name="T:Fusion.RenderAttribute">
            <summary>
            Override default render settings for <c>[Networked]</c> properties.
            </summary>
        </member>
        <member name="P:Fusion.RenderAttribute.Timeframe">
            <summary>
            <para>
            Force this property to be rendered in this <see cref="T:Fusion.RenderTimeframe"/>.
            </para>
            <para>
            This setting is prioritized over <see cref="T:Fusion.NetworkBehaviour"/> and <see cref="T:Fusion.NetworkObject"/> overrides.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.RenderAttribute.Source">
            <summary>
            <para>
            Force this property to be rendered using this <see cref="T:Fusion.RenderSource"/> (in the chosen <see cref="T:Fusion.RenderTimeframe"/>).
            </para>
            <para>
            This setting is prioritized over <see cref="T:Fusion.NetworkBehaviour"/> and <see cref="T:Fusion.NetworkObject"/> overrides.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.RenderAttribute.Method">
            <summary>
            <para>
            Override the default interpolation method for this property. The method's signature must match:
            </para>
            <para>
            <code>static T MethodName(T from, T to, float alpha) { /* ... */ } </code>
            </para>
            </summary>
        </member>
        <member name="M:Fusion.RenderAttribute.#ctor">
            <summary>
            Default constructor for RenderAttribute
            </summary>
        </member>
        <member name="T:Fusion.CloudCommunicator">
            <summary>
            Wrapper around the Fusion LBC Implementation <see cref="T:Fusion.Photon.Realtime.FusionRelayClient"/>
            
            It will control and manage the communication between Fusion and the Photon Cloud
            </summary>
        </member>
        <member name="P:Fusion.CloudCommunicator.Client">
            <summary>
            Fusion LBC Client Reference
            </summary>
        </member>
        <member name="P:Fusion.CloudCommunicator.CommunicatorID">
            <summary>
            ID of this Communicator. This reflects the Actor Number of the Peer inside the Room
            </summary>
        </member>
        <member name="P:Fusion.CloudCommunicator.WasExtracted">
            <summary>
            Flag to signal if this Communicator was extracted and will be reused
            </summary>
        </member>
        <member name="T:Fusion.CloudServices">
            <summary>
            Responsible to deal with LoadBalancingClient Events
            </summary>
            <summary>
            Responsible for dealing and managing the API used to communicate with the Photon Cloud.
            This also includes:
            - Send/Reply to Protocol Messages
            - Query for Reflexive Information
            - Perform NAT Punchthrough
            - Manage the Realtime client
            - Respond to/deal with Photon Cloud events
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsCloudReady">
            <summary>
            Signal if the local peer is connected to the Photon Cloud and can perform extra actions, like creating/joining a Room.
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.UserId">
            <summary>
            Photon Client UserID
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsInRoom">
            <summary>
            Signal if the local peer is already inside a Room
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsInLobby">
            <summary>
            Signal if the local peer is already inside a Lobby
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.CurrentJoinStage">
            <summary>
            Current Fusion Session Join Stage
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.CurrentProtocolMessageVersion">
            <summary>
            Current ProtocolMessageVersion
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.SessionSlots">
            <summary>
            Max Number of players a Session can handle
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsMasterClient">
            <summary>
            Signal if the local peer is also the Master Client of the Current Room
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.AuthenticationValues">
            <summary>
            Get the internal <see cref="P:Fusion.CloudServices.AuthenticationValues"/> used by the Client to perform the authentication
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.Communicator">
            <summary>
            Reference to the current active communicator
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.CachedRegionSummary">
            <summary>
            Get the local client cached region summary
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsNATPunchthroughEnabled">
            <summary>
            Signal if the local peer will try or accept connections using NAT Punch
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.CustomSTUNServer">
            <summary>
            Custom STUN Server
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.NATType">
            <summary>
            Exposes the current NAT Type from the local Peer
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.LocalPlayerRef">
            <summary>
            player ref assigned by the cloud
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.#ctor(Fusion.NetworkRunner,Fusion.Photon.Realtime.FusionAppSettings,Fusion.CloudCommunicator)">
            <summary>
            Builds a new CloudService reference
            </summary>
            <param name="runner">Reference to the current active Runner</param>
            <param name="customAppSettings"></param>
            <param name="communicator">Optional external Communicator</param>
        </member>
        <member name="M:Fusion.CloudServices.ExtractCommunicator">
            <summary>
            Extract the internal Communicator for later re-use
            </summary>
            <returns>Current <see cref="T:Fusion.CloudCommunicator"/> used by this instance with all resetted settings</returns>
        </member>
        <member name="M:Fusion.CloudServices.Update">
            <summary>
            Update and perform all pending actions related to the Photon Cloud communication
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.ConnectToCloud(Fusion.Photon.Realtime.AppSettings,Fusion.Photon.Realtime.AuthenticationValues,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Connect the local peer to Photon Cloud using an async process.
            </summary>
            <param name="authentication">Custom Authentication Values used to Auth the local peer</param>
            <param name="appSettings">Custom Photon App Settings</param>
            <param name="externalCancellationToken">External CancellationToken</param>
            <param name="useDefaultCloudPorts">Signal if the LoadBalancingClient should use the Default or Alternative Ports</param>
            <returns>Async Task of the connect to Photon Cloud process. Can be used to wait for the process to be finished</returns>
        </member>
        <member name="M:Fusion.CloudServices.JoinSessionLobby(Fusion.SessionLobby,System.String,Fusion.Photon.Realtime.LobbyType)">
            <summary>
            Join the Peer to a specific Lobby, either a prebuild or a custom one
            </summary>
            <param name="sessionLobby">Lobby Type to Join</param>
            <param name="lobbyID">Custom Lobby ID</param>
            <param name="lobbyType">Custom Lobby Type</param>
            <returns>True if the operation could be completed. <see cref="M:Fusion.Photon.Realtime.LoadBalancingClient.OpJoinLobby(Fusion.Photon.Realtime.TypedLobby)"/></returns>
        </member>
        <member name="M:Fusion.CloudServices.EnterRoom(Fusion.StartGameArgs,System.Threading.CancellationToken)">
             <summary>
             Make the local Peer Create/Join a Room based on Start Game Arguments
             
                           --------------------->Yes--->CreateOrJoin
             SharedMode--->| Valid Room Name |
                           --------------------->No---->[RandomRoomName]-->JoinRandomOrCreate
            
                           --------------------->Yes--->CreateOrJoin
             ClientMode--->| Valid Room Name |
                           --------------------->No---->[RandomRoomName]-->JoinRandom
             
             ServerMode--  --------------------->Yes----------------------------|
                        |->| Valid Room Name |                                  v
             HostMode----  --------------------->No---->[RandomRoomName]-->CreateOrJoin
             
             </summary>
             <param name="args">Start Game Args ref</param>
             <param name="externalCancellationToken">External Cancellation Token</param>
             <returns>Task of the Join Room process</returns>
        </member>
        <member name="M:Fusion.CloudServices.DisconnectFromCloud">
            <summary>
            Disconnect the Local Peer from the Photon Cloud.
            </summary>
            <returns>Async Task of the disconnect from Photon Cloud process. Can be used to wait for the process to be finished</returns>
        </member>
        <member name="M:Fusion.CloudServices.GetActorUserID(System.Int32)">
            <summary>
            Get the UserID of another Player Actor in the Room
            </summary>
            <param name="actorID">ActorID of a Player inside the Room</param>
            <returns>Player UserID</returns>
        </member>
        <member name="M:Fusion.CloudServices.TryGetActorIdByUniqueId(System.Int64,System.Int32@)">
            <summary>
            Try to get the ActorId associated with a specific Client Unique Id
            </summary>
            <param name="uniqueId">Client Unique Id to check</param>
            <param name="actorId">ActorId associated with that Client Unique Id</param>
            <returns>True if the ActorId can be found</returns>
        </member>
        <member name="M:Fusion.CloudServices.OnInternalConnectionAttempt(System.Int32,System.Int32,System.Boolean@,Fusion.Sockets.NetAddress@)">
            <summary>
            Callback fire on every connection attempt with a remote Server.
            
            It is used while trying to hole-punch the remote server and enables the manager to swap the target endpoint in between attempts.
            This is necessary to maintain a flow of attempts even if we exchange the local/public/relay endpoints
            </summary>
            <param name="attempt">Current attempt number</param>
            <param name="totalConnectionAttempts">Max number of attempts</param>
            <param name="shouldChange">Flag if target EndPoint should change</param>
            <param name="newAddress">New target EndPoint</param>
        </member>
        <member name="M:Fusion.CloudServices.Connect(Fusion.NATPunchStage,Fusion.Sockets.NetAddress)">
            <summary>
            Start the connection process with a Remote Server
            </summary>
            <param name="punchStage">Starting NAT Punch state, see <see cref="T:Fusion.NATPunchStage"/> for more info</param>
            <param name="endPoint">Remote Server EndPoint to connect to</param>
        </member>
        <member name="M:Fusion.CloudServices.Dispose">
            <summary>
            Disposes the current <see cref="T:Fusion.CloudServices"/>
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.OnRoomChanged">
            <summary>
            Callback invoked when any Room Property has changed
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.OnRoomListChanged(System.Collections.Generic.List{Fusion.Photon.Realtime.RoomInfo})">
            <summary>
            Callback invoked when the Room list is updated with data from the Cloud
            </summary>
            <param name="roomList">New List of <see cref="T:Fusion.Photon.Realtime.RoomInfo"/></param>
        </member>
        <member name="M:Fusion.CloudServices.Join(System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="M:Fusion.CloudServices.Join(System.Threading.CancellationToken)"/> Protocol Message to Fusion Plugin
            </summary>
            <param name="externalCancellationToken">Optional external cancellation token</param>
        </member>
        <member name="M:Fusion.CloudServices.SendNetworkSyncMessage(Fusion.NetworkProjectConfig)">
            <summary>
            Send a <see cref="T:Fusion.Protocol.NetworkConfigSync"/> Protocol Message to the Fusion Plugin
            </summary>
            <param name="projectConfig">Reference to the Project Config to be sent</param>
        </member>
        <member name="M:Fusion.CloudServices.SendReflexiveInfo(Fusion.Sockets.Stun.StunResult)">
            <summary>
            Send a <see cref="T:Fusion.Protocol.ReflexiveInfo"/> Protocol Message to the Fusion Plugin
            </summary>
            <param name="stunResult">Reference to StunResult used to build the Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.SendStateSnapshot(System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Build and send the latest Server Snapshot to the Fusion Plugin
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.HandleJoinMessage(System.Int32,Fusion.Protocol.Join)">
            <summary>
            Handles a <see cref="M:Fusion.CloudServices.Join(System.Threading.CancellationToken)"/> Confirmation Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="join">Join Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleStartMessage(System.Int32,Fusion.Protocol.Start)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.Start"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="start">Start Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleDisconnectMessage(System.Int32,Fusion.Protocol.Disconnect)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.Disconnect"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="disconnect">Disconnect Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleNetworkConfigMessage(System.Int32,Fusion.Protocol.NetworkConfigSync)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.NetworkConfigSync"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="configSync">NetworkConfigSync Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleReflexiveInfoMessage(System.Int32,Fusion.Protocol.ReflexiveInfo)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.ReflexiveInfo"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="reflexiveInfo">ReflexiveInfo Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.ConfirmJoin">
            <summary>
            Confirms or waits for confirmation from the Plugin of the Join Message
            </summary>
            <returns>True if the Join Confirmation was received, false otherwise</returns>
        </member>
        <member name="M:Fusion.CloudServices.Service_KeepAlive">
            <summary>
            Send an empty message to Photon Cloud so the LBC Connection keeps alive
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.Service_HostMigrationSnapshot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.CloudServices.Run_ReversePing(Fusion.Sockets.NetAddress)">
            <summary>
            Reverse ping will send Empty UDP Packets to the RemoteAddr in order to setup the Routing Table
            on the current NAT of the Server, forcing it to allow packages from the remote client to be received
            </summary>
            <param name="remoteAddr">Remove EndPoint to ping</param>
        </member>
        <member name="M:Fusion.CloudServices.QueryReflexiveInfo">
            <summary>
            Run the STUN Service to retrieve the current Reflexive Addresses of the local peer
            </summary>
            <returns>Running Task of the STUN Query Procedure</returns>
        </member>
        <member name="M:Fusion.CloudServices.UpdateInitializeArgs(Fusion.NetworkRunnerInitializeArgs)">
            <summary>
            Update the internal <see cref="T:Fusion.NetworkRunnerInitializeArgs"/> used to start the Fusion Runner
            </summary>
            <param name="newArgs">New arguments</param>
        </member>
        <member name="M:Fusion.CloudServices.CheckSubnet(Fusion.Sockets.NetAddress)">
            <summary>
            Check if Remote Private EndPoint appears to be in the same Subnet
            </summary>
            <returns>True if in same Subnet</returns>
        </member>
        <member name="M:Fusion.CloudServices.InitRelayLogs">
            <summary>
            Initilize the Log system from the Realtime SDK to use the Fusion Log System
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.UpdateSessionInfo(Fusion.SessionInfo,Fusion.Photon.Realtime.RoomInfo,System.String)">
            <summary>
            Converts a <see cref="T:Fusion.Photon.Realtime.RoomInfo"/> to a <see cref="T:Fusion.SessionInfo"/>
            </summary>
            <param name="sessionInfo"><see cref="T:Fusion.SessionInfo"/> </param>
            <param name="roomInfo"><see cref="T:Fusion.Photon.Realtime.RoomInfo"/> ref</param>
            <param name="region">Room Region</param>
            <returns><see cref="T:Fusion.SessionInfo"/> ref</returns>
        </member>
        <member name="T:Fusion.CloudServicesMetadata">
            <summary>
            Holds information about the local peer used to Join/Start/Connect to a remote Peer
            using the Photon Cloud as backend
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.LobbyClientServer">
            <summary>
            Client Server Lobby
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.LobbyShared">
            <summary>
            Shared Lobby
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.RunnerInitializeArgs">
            <summary>
            Reference to the initialization arguments set by the user.
            They are used to start the Fusion Runner
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.CurrentPunchStage">
            <summary>
            Connection Stage related to the current EndPoint Type used by the client to connect a remote server
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.CurrentJoinStage">
            <summary>
            Describes the current state of the Join process
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.CurrentProtocolMessageVersion">
            <summary>
            Describe the current protocol version we are using to communicate with the Plugin
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.RemoteReflexiveInfo">
            <summary>
            Remote Server Reflexive Info. Stores private and public EndPoint of the remote server.
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.LocalReflexiveInfo">
            <summary>
            Local Reflexive Info. Stores private and public EndPoint of the local peer.
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.UniqueId">
            <summary>
            Stores the local peer Unique Id
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.PlayerRef">
            <summary>
            Stores the local peer Unique Id
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.ScheduledRequests">
            <summary>
            Stores requests sent by the plugin
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.LastDisconnectMsg">
            <summary>
            Last Disconnect Msg Received from the Plugin
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.UniqueIdToReflexiveInfoTable">
            <summary>
            Mapping between Actor UniqueId and its ReflexiveInfo
            </summary>
        </member>
        <member name="T:Fusion.ScheduledRequests">
            <summary>
            Define a list of Requests that may be asked by the Plugin Server
            </summary>
        </member>
        <member name="F:Fusion.ScheduledRequests.None">
            <summary>
            No Request
            </summary>
        </member>
        <member name="F:Fusion.ScheduledRequests.ReflexiveInfo">
            <summary>
            Request for the Local Reflexive Info
            </summary>
        </member>
        <member name="T:Fusion.NATPunchStage">
            <summary>
            Describes the current Target Address Type used in the NAT Punch procedure
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.None">
            <summary>
            No connection procedure is running
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.Local">
            <summary>
            Trying to Connect to LAN EndPoint
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.Public">
            <summary>
            Trying to Connect to WAN EndPoint
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.Relay">
            <summary>
            Trying to Connect to Relay EndPoint
            </summary>
        </member>
        <member name="T:Fusion.JoinProcessStage">
            <summary>
            Stage of the Join Process.
            
            When starting the peer, the first thing we need to make sure is to have Joined the Room
            with a confirmation from the Plugin, this will signal the current stage of this
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Idle">
            <summary>
            Join Request not sent yet
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Joining">
            <summary>
            Join Request Sent, waiting for confirmation
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Done">
            <summary>
            Join Confirmation Received, all good
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Fail">
            <summary>
            Failed to receive Join Confirmation after a timeout (<see cref="!:CloudServicesMetadata.JOIN_PM_TIMEOUT"/>)
            </summary>
        </member>
        <member name="T:Fusion.PeerPing">
            <summary>
            Stores the data of a "Request to Ping" used by the Server in Client-Server Mode
            to send arbitrary "pings" to a connecting Client.
            
            This allows the local NAT Table to be updated with the right mapping information
            from the remote client, increasing the chance of the local Server to receive any
            connect request from the remote peer.
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.PING_DELAY">
            <summary>
            Delay between pings
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.AttemptCount">
            <summary>
            Total number of pings to send
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.NextAttemptCountDown">
            <summary>
            Countdown for the next ping
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.ReflexiveInfo">
            <summary>
            Remote Client Reflexive Info, used to getter the Public EndPoint to send the ping
            </summary>
        </member>
        <member name="T:Fusion.ScheduledRequestsExt">
            <summary>
            Extension methods to <see cref="T:Fusion.ScheduledRequests"/>
            </summary>
        </member>
        <member name="T:Fusion.LobbyInfo">
            <summary>
            Holds information about a Lobby
            </summary>
        </member>
        <member name="P:Fusion.LobbyInfo.IsValid">
            <summary>
            Flag to signal if the <see cref="T:Fusion.LobbyInfo"/> is ready for use.
            This is only true if the peer is currently connected to a Lobby.
            </summary>
        </member>
        <member name="P:Fusion.LobbyInfo.Name">
            <summary>
            Lobby Name
            </summary>
        </member>
        <member name="P:Fusion.LobbyInfo.Region">
            <summary>
            Stores the current connected Region
            </summary>
        </member>
        <member name="T:Fusion.SessionLobby">
            <summary>
            Session Lobby Type
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.Invalid">
            <summary>
            Invalid Session Lobby Type
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.ClientServer">
            <summary>
            ClientServer Lobby
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.Shared">
            <summary>
            Shared Lobby
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.Custom">
            <summary>
            Custom Lobby - works in conjuction with a Lobby Name/ID
            </summary>
        </member>
        <member name="T:Fusion.SessionInfo">
            <summary>
            Holds information about the Game Session
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.IsValid">
            <summary>
            Flag to signal if the <see cref="T:Fusion.SessionInfo"/> is ready for use
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.Name">
            <summary>
            Stores the current Room Name
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.Region">
            <summary>
            Stores the current connected Region
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.IsVisible">
            <summary>
            Signal if the current connected Room is visible
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.IsOpen">
            <summary>
            Signal if the current connected Room is open
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.Properties">
            <summary>
            Room Custom Properties
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.PlayerCount">
            <summary>
            Current number of peers inside this Session, this includes the Server/Host and Clients
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.MaxPlayers">
            <summary>
            Max number of peer that can join this Session, this value always include an extra slot for the Server/Host
            </summary>
        </member>
        <member name="M:Fusion.SessionInfo.op_Implicit(Fusion.SessionInfo)~System.Boolean">
            <summary>
            Check if the <see cref="T:Fusion.SessionInfo"/> reference is not Null and is Valid.
            </summary>
            <param name="sessionInfo"></param>
        </member>
        <member name="M:Fusion.SessionInfo.UpdateCustomProperties(System.Collections.Generic.Dictionary{System.String,Fusion.SessionProperty})">
            <summary>
            Update or change the Custom Properties of the current joined Room
            </summary>
            <param name="customProperties">New custom properties</param>
        </member>
        <member name="M:Fusion.SessionInfo.ToString">
            <summary>
            String representation of a <see cref="T:Fusion.SessionInfo"/>
            </summary>
            <returns>Formatted <see cref="T:Fusion.SessionInfo"/></returns>
        </member>
        <member name="T:Fusion.IAfterAllTicks">
            <summary>
            Interface for <see cref="M:Fusion.IAfterAllTicks.AfterAllTicks(System.Boolean,System.Int32)"/> callback. 
            Called after the resimulation loop (when applicable), and also after the forward simulation loop.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterAllTicks.AfterAllTicks(System.Boolean,System.Int32)">
            <summary>
            Called after the resimulation loop (when applicable), and also after the forward simulation loop.
            Only called on Updates where resimulation or forward ticks are processed.
            </summary>
            <param name="resimulation">True if this is being called during the resimulation loop. False if during the forward simulation loop.</param>
            <param name="tickCount">How many resimulation or forward ticks are going to be processed.</param>
        </member>
        <member name="T:Fusion.IAfterClientPredictionReset">
            <summary>
            Callback interface for <see cref="M:Fusion.IAfterClientPredictionReset.AfterClientPredictionReset"/>.
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            immediately after state is set to the latest server snapshot.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterClientPredictionReset.AfterClientPredictionReset">
            <summary>
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            immediately after state is set to the latest server snapshot.
            </summary>
        </member>
        <member name="T:Fusion.IAfterHostMigration">
            <summary>
            Used to mark NetworkBehaviors that need to be react after a Host Migration process
            </summary>
        </member>
        <member name="M:Fusion.IAfterHostMigration.AfterHostMigration">
            <summary>
            Invoked after the Host Migration happens in order to setup non-networked data on NetworkBehaviors
            </summary>
        </member>
        <member name="T:Fusion.IAfterTick">
            <summary>
            Interface for <see cref="M:Fusion.IAfterTick.AfterTick"/> callback. 
            Called after each tick simulation completes.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterTick.AfterTick">
            <summary>
            Called after each tick simulation completes.
            </summary>
        </member>
        <member name="T:Fusion.IAfterUpdate">
            <summary>
            Interface for the <see cref="M:Fusion.IAfterUpdate.AfterUpdate"/> callback, which is called at the end of each Fusion Update segment. 
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterUpdate.AfterUpdate">
            <summary>
            Called at the end of the Fusion Update loop, before all Unity MonoBehaviour.Update() callbacks.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeAllTicks">
            <summary>
            Interface for <see cref="M:Fusion.IBeforeAllTicks.BeforeAllTicks(System.Boolean,System.Int32)"/> callback. 
            Called before the resimulation loop (when applicable), and also before the forward simulation loop.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeAllTicks.BeforeAllTicks(System.Boolean,System.Int32)">
            <summary>
            Called before the resimulation loop (when applicable), and also before the forward simulation loop. 
            Only called on Updates where resimulation or forward ticks are processed.
            </summary>
            <param name="resimulation">True if this is being called during the resimulation loop. False if during the forward simulation loop.</param>
            <param name="tickCount">How many resimulation or forward ticks are going to be processed.</param>
        </member>
        <member name="T:Fusion.IBeforeClientPredictionReset">
            <summary>
            Callback interface for <see cref="M:Fusion.IBeforeClientPredictionReset.BeforeClientPredictionReset"/>.
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            before state is set to the latest server snapshot.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeClientPredictionReset.BeforeClientPredictionReset">
            <summary>
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            before state is set to the latest server snapshot.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeHitboxRegistration">
            <summary>
            Interface for <see cref="M:Fusion.IBeforeHitboxRegistration.BeforeHitboxRegistration"/> callback.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeHitboxRegistration.BeforeHitboxRegistration">
            <summary>
            Called immediately before the <see cref="T:Fusion.HitboxManager"/> registers hitboxes in a snapshot.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeTick">
            <summary>
            Interface for <see cref="M:Fusion.IBeforeTick.BeforeTick"/> callback. 
            Called before each tick is simulated.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeTick.BeforeTick">
            <summary>
            Called before each tick is simulated.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeUpdate">
            <summary>
            Interface for the <see cref="M:Fusion.IBeforeUpdate.BeforeUpdate"/> callback, which is called at the beginning of each Fusion Update segment. 
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeUpdate.BeforeUpdate">
            <summary>
            Called at the start of the Fusion Update loop, before the Fusion simulation loop.
            </summary>
        </member>
        <member name="T:Fusion.ISimulationEnter">
            <summary>
            Interface for <see cref="M:Fusion.ISimulationEnter.SimulationEnter"/> callback.
            Called when the <see cref="T:Fusion.NetworkObject"/> joins AreaOfInterest.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            Only applicable to <see cref="!:SimulationConfig.StateReplicationModes.EventualConsistency"/>. 
            </summary>
        </member>
        <member name="M:Fusion.ISimulationEnter.SimulationEnter">
            <summary>
            Called when the <see cref="T:Fusion.NetworkObject"/> joins AreaOfInterest.
            Object is now receiving snapshot updates.
            Object will execute <see cref="T:Fusion.NetworkBehaviour"/> FixedUpdateNetwork() and Render() methods until the object leaves simulation.
            </summary>
        </member>
        <member name="T:Fusion.ISimulationExit">
            <summary>
            Interface for the <see cref="M:Fusion.ISimulationExit.SimulationExit"/> callback.
            Called when the <see cref="T:Fusion.NetworkObject"/> leaves AreaOfInterest. 
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            Only applicable to <see cref="!:SimulationConfig.StateReplicationModes.EventualConsistency"/>. 
            </summary>
        </member>
        <member name="M:Fusion.ISimulationExit.SimulationExit">
            <summary>
            Called when the <see cref="T:Fusion.NetworkObject"/> leaves AreaOfInterest. 
            Object is no longer receiving snapshot updates.
            Object will stop executing <see cref="T:Fusion.NetworkBehaviour"/> FixedUpdateNetwork() and Render() methods until the object rejoins simulation.
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviour">
            <summary>
            Base class for Fusion network components, which are associated with a <see cref="T:Fusion.NetworkObject"/>.
            <para>Derived from <see cref="T:Fusion.SimulationBehaviour"/>, components derived from this class are associated with a <see cref="T:Fusion.NetworkRunner"/> and <see cref="T:Fusion.Simulation"/>.
            Components derived from this class are associated with a parent <see cref="T:Fusion.NetworkObject"/>.
            and can use the <see cref="T:Fusion.NetworkedAttribute"/> on properties to automate state synchronization, 
            and can use the <see cref="T:Fusion.RpcAttribute"/> on methods, to automate messaging.</para>
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.WordInfo">
            <summary>
            Gives access to the offset (in 32 bit words) and count (in 32 bit words) of this behaviour backing data
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.ChangedTick">
            <summary>
            The tick the data on this networked behaviour changed
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.Id">
            <summary>
            The unique identifier for this network behaviour. 
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.HasInputAuthority">
            <summary>
            Returns true if the <see cref="P:Fusion.Simulation.LocalPlayer"/> of the associated <see cref="T:Fusion.NetworkRunner"/> is the designated as Input Source for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.HasStateAuthority">
            <summary>
            Returns true if the associated <see cref="T:Fusion.NetworkRunner"/> is the State Source for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.IsProxy">
            <summary>
            Returns true if the associated <see cref="T:Fusion.NetworkRunner"/> is neither the Input nor State Authority for this network entity.
            It is recommended to use !<see cref="P:Fusion.NetworkBehaviour.HasStateAuthority"/> or !<see cref="P:Fusion.NetworkBehaviour.HasInputAuthority"/> when possible instead,
            as this check requires evaluating both authorities - and is therefore less performant than the individual checks.
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.DynamicWordCount">
            <summary>
            Override this value for custom memory allocations. 
            This is for advanced use cases only, and cannot be used if <see cref="T:Fusion.NetworkedAttribute"/> is used in the derived class.  
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.IsEditorWritable">
            <summary>
            Returns true if the object is writable in the editor - i.e. when it is not attached
            or has the state authority.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetLocalAuthorityMask">
            <summary>
            Gets a bitmask of <see cref="T:Fusion.AuthorityMasks"/> flags, representing the current local authority over this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.ResetState">
            <summary>
            Resets the state of the object to the original state 
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.CopyStateFrom(Fusion.NetworkBehaviour)">
            <summary>
            Copies entire state of passed in source <see cref="T:Fusion.NetworkBehaviour"/>
            </summary>
            <param name="source">Source <see cref="T:Fusion.NetworkBehaviour"/> to copy data from</param>
        </member>
        <member name="M:Fusion.NetworkBehaviour.Spawned">
            <summary>
            Post spawn callback.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.Despawned(Fusion.NetworkRunner,System.Boolean)">
            <summary>
            Called before the network object is despawned
            </summary>
            <param name="hasState">If the state of the behaviour is still accessible</param>
        </member>
        <member name="M:Fusion.NetworkBehaviour.ReinterpretState``1(System.Int32)">
            <summary>
            Allows read and write access to the internal state buffer
            </summary>
            <param name="offset">The offset to generate a ref for, in integer words</param>
            <typeparam name="T"></typeparam>
            <returns>Reference to the location in memory defined by offset</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInput``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInput``1(``0@)">
            <summary>
            Returns true if it a valid <see cref="T:Fusion.INetworkInput"/> can be found for the current simulation tick (Typically this is used in <see cref="M:Fusion.NetworkBehaviour.FixedUpdateNetwork"/>).
            <para>The returned input struct originates from the <see cref="P:Fusion.NetworkObject.InputAuthority"/>, 
            and if valid contains the inputs supplied by that <see cref="T:Fusion.PlayerRef"/> for the current simulation tick.</para>
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.op_Implicit(Fusion.NetworkBehaviour)~Fusion.NetworkBehaviourId">
            <summary>
            Converts NetworkBehaviour to NetworkBehaviourId
            </summary>
            <param name="behaviour"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.InvokeWeavedCode">
            <summary>
            This method needs to be invoked in user overrides of:
            <see cref="M:Fusion.NetworkBehaviour.CopyBackingFieldsToState(System.Boolean)"/>
            <see cref="M:Fusion.NetworkBehaviour.CopyStateToBackingFields"/>
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.MakeInitializer``1(``0[])">
            <summary>
            This is a special method that is meant to be used only for [Networked] properties inline initialization.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.MakeInitializer``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            This is a special method that is meant to be used only for [Networked] properties inline initialization.
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviourBuffer">
            <summary>
            Provides low level accesss to data buffers that can be read using a NetworkBehaviour.Reader
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviourUtils.InternalOnDestroy(Fusion.SimulationBehaviour)">
            <summary>
            This method is not meant to be called directly. Calls are injected by the Weaver.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fusion.NetworkBehaviourUtils.InternalOnEnable(Fusion.SimulationBehaviour)">
            <summary>
            This method is not meant to be called directly. Calls are injected by the Weaver.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fusion.NetworkBehaviourUtils.InternalOnDisable(Fusion.SimulationBehaviour)">
            <summary>
            This method is not meant to be called directly. Calls are injected by the Weaver.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Fusion.NetworkMecanimAnimator">
            <summary>
            A component for synchronizing the Animator controller state from the State Authority to network proxies.
            Requires a Unity Animator component, and a <see cref="T:Fusion.NetworkObject"/> component.
            NOTE: Animator Root Motion is not compatible with re-simulation and prediction.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.Animator">
            <summary>
            The Animator being synced. If unset, will attempt to find one on this GameObject.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.TotalWords">
            <summary>
            The number of words allocated per snapshot for serialization of the Animator. (One Word is 32 bits, or 4 bytes).
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.ApplyTiming">
            <summary>
            The source of the State which is applied in Render.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.SyncSettings">
            <summary>
            Flags controlling which Mecanim data will be synced.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.StateHashes">
            <summary>
            States found in the current AnimatorController, converted to hashes.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.TriggerHashes">
            <summary>
            Triggers found in the current AnimatorController, converted to hashes.
            </summary>
        </member>
        <member name="M:Fusion.NetworkMecanimAnimator.SetTrigger(System.Int32,System.Boolean)">
            <summary>
            Queues a SetTrigger() call for the associated Animator on the State Authority. Call this instead of Animator.SetTrigger() for the State Authority to ensure that triggers are captured.
            On State Authority, this call will defer the SetTrigger() pass-through to the Animator until FixedUpdateNetwork() is called, 
            where all queued triggers will be executed (this is to ensure tick agreement between server and clients).
            </summary>
            <param name="triggerHash"></param>
            <param name="passThroughOnInputAuthority">Will call Animator.SetTrigger() immediately on the InputAuthority. If false, SetTrigger() will not be called on the Input Authority at all
            and Animator.SetTrigger() should be called explicitly as needed.
            </param>
        </member>
        <member name="M:Fusion.NetworkMecanimAnimator.SetTrigger(System.String,System.Boolean)">
            <summary>
            Queues a SetTrigger() call for the associated Animator on the State Authority. Call this instead of Animator.SetTrigger() for the State Authority to ensure that triggers are captured.
            On State Authority, this call will defer the SetTrigger() pass-through to the Animator until FixedUpdateNetwork() is called, 
            where all queued triggers will be executed (this is to ensure tick agreement between server and clients).
            </summary>
            <param name="trigger"></param>
            <param name="passThroughOnInputAuthority">Will call Animator.SetTrigger() immediately on the InputAuthority. If false, SetTrigger() will not be called on the Input Authority at all
            and Animator.SetTrigger() should be called explicitly as needed.
            </param>
        </member>
        <member name="T:Fusion.SimulationBehaviour">
            <summary>
            Base class for a Fusion aware Behaviour (derived from UnityEngine.MonoBehavour).
            Objects derived from this object can be associated with a <see cref="T:Fusion.NetworkRunner"/> and <see cref="T:Fusion.Simulation"/>.
            If a parent <see cref="T:Fusion.NetworkObject"/> is found, this component will also be associated with that network entity.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviour.Runner">
            <summary>
            The <see cref="T:Fusion.NetworkRunner"/> this component is associated with.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviour.Object">
            <summary>
            The <see cref="T:Fusion.NetworkObject"/> this component is associated with.
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.FixedUpdateNetwork">
            <summary>
            Fusion FixedUpdate timing callback.
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.Render">
            <summary>
            Post simulation frame rendering callback. Runs after all simulations have finished. Use in place of Unity's Update when Fusion is handling Physics.
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.OnDestroy">
            <summary>
            This is intentionally private; sub classes can create their own overload
            without worrying about matching visibility etc. <see cref="M:Fusion.NetworkBehaviourUtils.InternalOnDestroy(Fusion.SimulationBehaviour)"/>
            calls will be weaved in.
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.OnEnable">
            <summary>
            <see cref="M:Fusion.SimulationBehaviour.OnDestroy"/>
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.OnDisable">
            <summary>
            <see cref="M:Fusion.SimulationBehaviour.OnDestroy"/>
            </summary>
        </member>
        <member name="T:Fusion.SimulationBehaviourAttribute">
            <summary>
            Attribute for specifying which <see cref="T:Fusion.SimulationStages"/> and <see cref="T:Fusion.SimulationModes"/> this <see cref="T:Fusion.SimulationBehaviour"/> will execute in.
            Can be used to limit execution to only Host, Server or Client peers, or to only execute on Resimulation or Forward ticks.
            Usage:
            <code>
            [SimulationBehaviour(Stages = SimulationStages.Forward, Modes = SimulationModes.Server | SimulationModes.Host)]
            </code>
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourAttribute.Stages">
            <summary>
            Flag for which stages of the simulation loop this component will execute this script.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourAttribute.Modes">
            <summary>
            Flag for which indicated peers in <see cref="T:Fusion.SimulationModes"/> will execute this script.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourAttribute.Topologies">
            <summary>
            Flag for which topologies this script will execute in
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourUpdater.CallbackInterfacesDefualts">
            <summary>
            The default behaviour interfaces
            </summary>
        </member>
        <member name="T:Fusion.NetworkPositionRotation">
            <summary>
            Use NetworkTransform (or any custom class derived from NetworkTRSP) to synchronize initial transform values. This component is non-functional.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbody">
            <summary>
            Use the Fusion Unity Physics Add-on, or your own variation of it to synchronize Rigidbodies. This component is non-functional.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbody2D">
            <summary>
            Use the Fusion Unity Physics Add-on, or your own variation of it to synchronize Rigidbodies. This component is non-functional.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransform">
            <summary>
            Add to any <see cref="T:Fusion.NetworkObject"/> Transform, or its associated child Transforms to automatically synchronize
            TRSP (Position/Rotation/Scale/Parent).
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.SyncScale">
            <summary>
            Enables synchronization of LocalScale.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.SyncParent">
            <summary>
            Enables synchronization of transform.parent.
            NOTE: Parent GameObjects must have a <see cref="T:Fusion.NetworkBehaviour"/> derived component to be a valid parent,
            parent must belong to a different <see cref="T:Fusion.NetworkObject"/> than this Object.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransform.AutoUpdateAreaOfInterestOverride">
            <summary>
            Determines if parent changes should automatically call <see cref="M:Fusion.NetworkTransform.SetAreaOfInterestOverride(Fusion.NetworkObject)"/>,
            and assign the parent <see cref="T:Fusion.NetworkObject"/> as the override. Default is true, as you typically will want
            player interest in this object to reflect player interest in the nested parent object. For example,
            if a player is carrying an nested Object, players should only see that carried Object if they see the player.
            Additionally, AOI works in world space, and NetworkTransform operates in local space, so any AOI position values of
            nested Objects will ALWAYS be invalid, so nested Objects should always have their AOI Override set to a non-nested Object.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform._autoAOIOverride">
            <summary>
            Automatically sets the Area Of Interest Override for this NetworkObject to the parent NetworkObject.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.DisableSharedModeInterpolation">
            <summary>
            Disable interpolation on State Authority in Shared Mode. You should disable interpolation if your controller code moves an object inside of Update()
            rather than FixedUpdateNetwork().
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.Teleport(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion})">
            <summary>
            Set the transform position and rotation to the indicated values, and network the Teleport event.
            This will suspend interpolation between the previous tick state and the current tick state in Render(),
            on this peer and all remote peers.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.SetAreaOfInterestOverride(Fusion.NetworkObject)">
            <summary>
            Manually set the <see cref="T:Fusion.NetworkObject"/> used as the AreaOfInterestOverride.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fusion.NetworkTransform.Spawned">
            <inheritdoc />
        </member>
        <member name="M:Fusion.NetworkTransform.Render">
            <inheritdoc />
        </member>
        <member name="T:Fusion.INetworkTRSPTeleport">
            <summary>
            Implement this interface on a <see cref="T:Fusion.NetworkTRSP"/> implementation to indicate it can be teleported.
            </summary>
        </member>
        <member name="M:Fusion.INetworkTRSPTeleport.Teleport(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion})">
            <summary>
            Teleports to the indicated values, and network the Teleport event.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTRSP">
            <summary>
            Base class for spatial (Position/Rotation/Scale/Parent) synchronization component, such as <see cref="T:Fusion.NetworkTransform"/>.
            Provides the base logic for render interpolation, parenting synchronization, and teleport, that can be used in components derived from this class.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTRSP.IsMainTRSP">
            <summary>
            The main <see cref="T:Fusion.NetworkTRSP"/> is at the root of the <see cref="T:Fusion.NetworkObject"/>
            and it will be used for area of interest operations and parenting of the <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTRSP.Data">
            <summary>
            The networked data of this <see cref="T:Fusion.NetworkTRSP"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTRSP.State">
            <summary>
            A reference to the networked data of this <see cref="T:Fusion.NetworkTRSP"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTRSP.SetAreaOfInterestOverride(Fusion.NetworkObject)">
            <summary>
            Manually set the <see cref="T:Fusion.NetworkObject"/> used as the AreaOfInterestOverride.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fusion.NetworkTRSP.Teleport(Fusion.NetworkTRSP,UnityEngine.Transform,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion})">
            <summary>
            The default Teleport implementation for <see cref="T:Fusion.NetworkTRSP"/> derived classes.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTRSP.SetParentTransform(Fusion.NetworkTRSP,UnityEngine.Transform,Fusion.NetworkBehaviourId)">
            <summary>
            Default handling for setting a <see cref="T:Fusion.NetworkTRSP"/>'s parent using a NetworkBehaviourId value.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTRSP.ResolveAOIOverride(Fusion.NetworkTRSP,UnityEngine.Transform)">
            <summary>
            Recursively attempts to find nested parent NetworkObject, and if found assigns that NetworkObject as the AreaOfInterestOverride.
            </summary>
            <param name="behaviour">Only pass a NetworkTRSP derived class that is on the same Transform as its associated <see cref="T:Fusion.NetworkObject"/>,
            as AreaOfInterestOverride is only applicable when <see cref="P:Fusion.NetworkTRSP.IsMainTRSP"/> is true.</param>.
            <param name="parent">The direct parent of the </param>
        </member>
        <member name="M:Fusion.NetworkTRSP.Render(Fusion.NetworkTRSP,UnityEngine.Transform,System.Boolean,System.Boolean,System.Boolean,Fusion.Tick@)">
            <summary>
            Default Render handling for <see cref="T:Fusion.NetworkTRSP"/> derived classes.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTRSPData">
            <summary>
            Data structure storing spatial (Position/Rotation/Scale/Parent) synchronization data for spatial synchronization components, <see cref="T:Fusion.NetworkTRSP"/> and its subclass <see cref="T:Fusion.NetworkTransform"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTRSPData.NonNetworkedParent">
            <summary>
            Special NetworkBehaviourId value, used as a flag to tell the parent is a non-networked object
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.WORDS">
            <summary>
            Networked properties word count for the base <see cref="T:Fusion.NetworkTRSPData"/>
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.SIZE">
            <summary>
            The actual size for the networked properties in bytes
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.POSITION_OFFSET">
            <summary>
            Offset to point at the position values on the data buffer
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.Parent">
            <summary>
            Id of a NetworkBehaviour on the parent of the component's transform. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.Position">
            <summary>
            Position relevant for the spatial synchronization component (can be used to either store a local position or a world position, depending on the component)
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.Rotation">
            <summary>
            Rotation relevant for the spatial synchronization component (can be used to either store a local rotation or a world rotation, depending on the component)
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.Scale">
            <summary>
            Scale relevant for the spatial synchronization component
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.TeleportKey">
            <summary>
            Key used to differentiate between several teleports
            </summary>
        </member>
        <member name="F:Fusion.NetworkTRSPData.AreaOfInterestOverride">
            <summary>
            Id of a behaviour used as the reference point for this component during area of interest operations
            The behaviour should be a <see cref="T:Fusion.NetworkTRSP"/> derived class, that is on the same Transform as its associated <see cref="T:Fusion.NetworkObject"/>
            </summary>
        </member>
        <member name="T:Fusion.NestedComponentUtilities">
            <summary>
            Tools to replace GetComponent variants that respects nested objects.
            These are used to find components of a NetworkedObjects without also finding components that belong to parent or child NetworkedObjects.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetParentComponent``1(UnityEngine.Transform)">
            <summary>
            Find T on supplied transform or any parent. Unlike GetComponentInParent, GameObjects do not need to be active to be found.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInParents``1(UnityEngine.Transform,System.Collections.Generic.List{``0})">
            <summary>
            Returns all T found between the child transform and its root. Order in List from child to parent, with the root/parent most being last.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentInParent``2(UnityEngine.Transform)">
            <summary>
            Same as GetComponentInParent, but will always include inactive objects in search. 
            Will also stop recursing up the hierarchy when the StopOnT is found.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentInParents``2(UnityEngine.Transform)">
            <summary>
            UNTESTED
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInParents``2(UnityEngine.Transform,System.Collections.Generic.List{``0})">
            <summary>
            Finds components of type T on supplied transform, and every parent above that node, inclusively stopping on node StopT component.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInChildren``2(UnityEngine.Transform,System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Same as GetComponentsInChildren, but will not recurse into children with component of the StopT type.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInChildren``1(UnityEngine.Transform,System.Collections.Generic.List{``0},System.Boolean,System.Type[])">
            <summary>
            Same as GetComponentsInChildren, but will not recurse into children with any component of the types in the stopOn array. 
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInChildren``3(UnityEngine.Transform,System.Boolean,System.Collections.Generic.List{``0})">
            <summary>
            Same as GetComponentsInChildren, but will not recurse into children with component of the StopT type.
            </summary>
            <typeparam name="T">Cast found components to this type. Typically Component, but any other class/interface will work as long as they are assignable from SearchT.</typeparam>
            <typeparam name="SearchT">Find components of this class or interface type.</typeparam>
            <typeparam name="StopT">When this component is found, no further recursing will be performed on that node.</typeparam>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``1(UnityEngine.SceneManagement.Scene,System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slower operation, and does produce garbage collection.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``1(UnityEngine.SceneManagement.Scene,System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slower operation which should not be run every update.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scene"></param>
            <param name="list">Supplied list that will be populated by this find.</param>
            <param name="includeInactive">Whether results should include inactive components.</param>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``2(UnityEngine.SceneManagement.Scene,System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slow operation, and does produce garbage collection.
            </summary>
            <typeparam name="T">The type being searched for.</typeparam>
            <typeparam name="CastT">Casts all found objects to this type, and returns collection of this type. Objects that fail cast are excluded.</typeparam>
            <param name="scene"></param>
            <param name="includeInactive">Whether results should include inactive components.</param>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``2(UnityEngine.SceneManagement.Scene,System.Collections.Generic.List{``1},System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slower operation and should not be run every update.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="CastT"></typeparam>
            <param name="scene"></param>
            <param name="list">Supplied list that will be filled with found objects.</param>
            <param name="includeInactive">Whether results should include inactive components.</param>
        </member>
        <member name="M:Fusion.LagCompensation.BVH.PosUpdateRefit">
            <summary>
            Call this to batch-optimize any object-changes notified through 
            ssBVHNode.refit_ObjectChanged(..). For example, in a game-loop, 
            call this once per frame.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.BVH.BoundsFromSphere(UnityEngine.Vector3,System.Single)">
            <summary>
            Call this when you wish to update an object. This does not update straight away, but marks it for update when Optimize() is called
            </summary>
            <param name="toUpdate"></param>
        </member>
        <member name="M:Fusion.LagCompensation.BVH.#ctor(Fusion.LagCompensation.Mapper,System.Int32,System.Collections.Generic.List{Fusion.HitboxRoot},System.Single)">
            <summary>
            initializes a BVH with a given nodeAdaptor, and object list.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.BVHNode.SplitNode(Fusion.LagCompensation.BVH,System.Collections.Generic.List{Fusion.HitboxRoot})">
            <summary>
            tryRotate looks at all candidate rotations, and executes the rotation with the best resulting SAH (if any)
            </summary>
            <param name="bvh"></param>
        </member>
        <member name="T:Fusion.LagCompensation.LagCompensationUtils.ContactData">
            <summary>
            Details regarding a shape intersection.
            It does not carry information about the intersection happening or not.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.LagCompensationUtils.ContactData.Point">
            <summary>
            Contact point.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.LagCompensationUtils.ContactData.Normal">
            <summary>
            Vector that described the plane of smallest penetration between the shapes.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.LagCompensationUtils.ContactData.Penetration">
            <summary>
            Penetration along the normal plane.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.LagCompensationUtils.LocalAABBSphereIntersection(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Checks if a sphere in the local space of an AABB intersects with it.
            </summary>
            <param name="aabbExtents">The extents of the AABB in the positive direction of each axis.</param>
            <param name="sphereCenter">The center of the sphere in the local space of the AABB.</param>
            <param name="sphereRadius">The radius of the sphere.</param>
            <returns>True if there is intersection. False otherwise.</returns>
        </member>
        <member name="M:Fusion.LagCompensation.LagCompensationUtils.LocalAABBSphereContact(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,Fusion.LagCompensation.LagCompensationUtils.ContactData@)">
            <summary>
            Checks if a sphere in the local space of an AABB intersects with it and outputs contact data (also in local space).
            </summary>
            <param name="aabbExtents">The extents of the AABB in the positive direction of each axis.</param>
            <param name="sphereCenter">The center of the sphere in the local space of the AABB.</param>
            <param name="sphereRadius">The radius of the sphere.</param>
            <param name="contact"><see cref="T:Fusion.LagCompensation.LagCompensationUtils.ContactData">Contact data</see> in the local space of the AABB. Default if there is no intersection.</param>
            <returns>True if there is intersection. False otherwise.</returns>
        </member>
        <member name="T:Fusion.LagCompensation.BVHNodeDrawInfo">
            <summary>
            Container class to provide the necessary info to draw nodes from the BVH
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.BVHNodeDrawInfo.Bounds">
            <summary>
            Get the node Bounds
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.BVHNodeDrawInfo.Depth">
            <summary>
            Get the node depth on the BVH
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.BVHNodeDrawInfo.MaxDepth">
            <summary>
            Get the BVH max depth
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.ColliderDrawInfo">
            <summary>
            Container class to provide the necessary information to draw a hitbox collider
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.ColliderDrawInfo.Type">
            <summary>
            The <see cref="T:Fusion.HitboxTypes"/> of the collider.
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.ColliderDrawInfo.BoxExtents">
            <summary>
            The box extends of the collider
            Used on <see cref="T:Fusion.HitboxTypes"/> of types: Box
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.ColliderDrawInfo.Offset">
            <summary>
            The offset of the collider.
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.ColliderDrawInfo.Radius">
            <summary>
            The radius of the collider.
            Used on <see cref="T:Fusion.HitboxTypes"/> of types: Sphere and Capsule.
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.ColliderDrawInfo.CapsuleHeight">
            <summary>
            The height for capsule colliders.
            <seealso cref="T:Fusion.HitboxTypes"/>
            </summary>
        </member>
        <member name="P:Fusion.LagCompensation.ColliderDrawInfo.LocalToWorldMatrix">
            <summary>
            The local to world matrix of the collider.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.LagCompensationDraw">
            <summary>
            Provide access to iterate over the lag compensation system components and give the necessary information to draw them.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.LagCompensationDraw.SnapshotHistoryDraw">
            <summary>
            Iterate over to get the hitbox snapshots draw data. Iterate the received hitbox snapshot draw data to get all the colliders draw info for that snapshot.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.LagCompensationDraw.BVHDraw">
            <summary>
            Iterate over to get the BVH node draw data.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.LagCompensationDraw.GizmosDrawWireCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Method to draw capsules out of simple shapes.
            </summary>
            <param name="topCenter">The top capsule end position</param>
            <param name="bottomCenter">The bottom capsule end posistion</param>
            <param name="capsuleRadius">The capsule radius</param>
        </member>
        <member name="T:Fusion.LagCompensation.SnapshotHistoryDraw">
            <summary>
            Provide a way to iterate over the <see cref="T:Fusion.LagCompensation.HitboxBuffer"/> and
            return the <see cref="T:Fusion.LagCompensation.HitboxColliderContainerDraw"/> container for each snapshot on the buffer.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.HitboxColliderContainerDraw">
            <summary>
            Provide a way to iterate over the <see cref="T:Fusion.LagCompensation.HitboxBuffer.HitboxSnapshot"/> and return
            the <see cref="T:Fusion.LagCompensation.ColliderDrawInfo"/> for each collider on the snapshot.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.BVHDraw">
            <summary>
            Provide a way to iterate over BVH and return a <see cref="T:Fusion.LagCompensation.BVHNodeDrawInfo"/> for each node.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.HitType">
            <summary>
            Queries can hit either fusion's custom <see cref="F:Fusion.LagCompensation.HitType.Hitbox"/> or Unity's standard Physx/Box2D colliders.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.HitType.None">
            <summary>
            Used when a raycast does not hit anything. Not used on overlaps.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.HitType.Hitbox">
            <summary>
            <see cref="T:Fusion.LagCompensatedHit"/> is a Fusion <see cref="F:Fusion.LagCompensation.HitType.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.HitType.PhysX">
            <summary>
            <see cref="T:Fusion.LagCompensatedHit"/> is a Unity PhysX Collider.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.HitType.Box2D">
            <summary>
            <see cref="T:Fusion.LagCompensatedHit"/> is a Unity Box2D Collider.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.LagCompensatedExt.SortReference(System.Collections.Generic.List{Fusion.LagCompensatedHit},UnityEngine.Vector3)">
            <summary>
            Sorts all <paramref name="hits"/> in ascending order of distance
            from <see cref="F:Fusion.LagCompensatedHit.Point"/> to the <paramref name="reference"/> point.
            </summary>
            <param name="hits">List containing hits to be sorted.</param>
            <param name="reference">Used as reference point to compute distance from hit points.</param>
            <exception cref="T:System.NullReferenceException"> If <paramref name="hits"/> are null.</exception>
        </member>
        <member name="M:Fusion.LagCompensation.LagCompensatedExt.SortDistance(System.Collections.Generic.List{Fusion.LagCompensatedHit})">
            <summary>
            Sorts all <paramref name="hits"/> in ascending order of <see cref="F:Fusion.LagCompensatedHit.Distance"/>.
            </summary>
            <param name="hits">List containing hits to be sorted.</param>
            <exception cref="T:System.NullReferenceException"> If <paramref name="hits"/> are null.</exception>
        </member>
        <member name="T:Fusion.LagCompensation.HitboxBuffer">
            <summary>
            HitboxBuffer will store all snapshots of the colliders into a circular buffer
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.HitboxBuffer.HitboxSnapshot">
            <summary>
            HitboxContainer represents 1 snapshot of all containers in a given Tick
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.PositionRotationQueryParams">
            <summary>
            Query parameters for position rotation query
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.PositionRotationQueryParams.#ctor(Fusion.LagCompensation.QueryParams,Fusion.Hitbox)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.PositionRotationQueryParams"/>.
            </summary>
            <param name="queryParams">Parameters to be used</param>
            <param name="hitbox">The hitbox to be queried</param>
        </member>
        <member name="T:Fusion.LagCompensation.BoxOverlapQuery">
            <summary>
            Class that represents a box overlap query. Used to query against the <see cref="P:Fusion.NetworkRunner.LagCompensation"/> API.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.BoxOverlapQuery.Center">
            <summary>
            The box query center.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.BoxOverlapQuery.Extents">
            <summary>
            The box query extents.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensation.BoxOverlapQuery.Rotation">
            <summary>
            The box query rotation.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.BoxOverlapQuery.#ctor(Fusion.LagCompensation.BoxOverlapQueryParams@)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.BoxOverlapQuery"/> with the given <see cref="!:boxOverlapParams"/>.
            </summary>
            <param name="boxOverlapParams">The parameters to be used when creating the query.</param>
        </member>
        <member name="M:Fusion.LagCompensation.BoxOverlapQuery.#ctor(Fusion.LagCompensation.BoxOverlapQueryParams@,UnityEngine.Collider[],UnityEngine.Collider2D[])">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.BoxOverlapQuery"/> with the given <see cref="!:boxOverlapParams"/>. The result colliders arrays
            can be provided to avoid allocation.
            </summary>
            <param name="boxOverlapParams">The parameters to be used when creating the query.</param>
            <param name="physXOverlapHitsCache">Array to write the results of the PhysX query if used.</param>
            <param name="box2DOverlapHitsCache">Array to write the results of the Box2D query if used.</param>
        </member>
        <member name="T:Fusion.LagCompensation.BoxOverlapQueryParams">
            <summary>
            Base parameters needed to execute a box overlap query
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.BoxOverlapQueryParams.#ctor(Fusion.LagCompensation.QueryParams,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.BoxOverlapQueryParams"/>
            </summary>
            <param name="queryParams">Parameters to be used</param>
            <param name="center">The query center</param>
            <param name="extents">The query extents</param>
            <param name="rotation">The query rotation</param>
            <param name="staticHitsCapacity">Capacity for the cached PhysX and Box2D static hits.</param>
        </member>
        <member name="T:Fusion.LagCompensation.QueryParams">
            <summary>
            Base parameters needed to execute a query
            </summary>
        </member>
        <member name="T:Fusion.LagCompensation.RaycastAllQuery">
            <summary>
            Class that represents a raycast all query. Used to query against the <see cref="P:Fusion.NetworkRunner.LagCompensation"/> API.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.RaycastAllQuery.#ctor(Fusion.LagCompensation.RaycastQueryParams@)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.RaycastAllQuery"/> with the given <see cref="T:Fusion.LagCompensation.RaycastQueryParams"/>.
            </summary>
            <param name="raycastQueryParams">The parameters to be used when creating the query.</param>
        </member>
        <member name="M:Fusion.LagCompensation.RaycastAllQuery.#ctor(Fusion.LagCompensation.RaycastQueryParams@,UnityEngine.RaycastHit[],UnityEngine.RaycastHit2D[])">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.RaycastAllQuery"/> with the given <see cref="T:Fusion.LagCompensation.RaycastQueryParams"/>. The result colliders arrays
            can be provided to avoid allocation.
            </summary>
            <param name="raycastQueryParams">The parameters to be used when creating the query.</param>
            <param name="physXRaycastHitsCache">Array to write the results of the PhysX query if used.</param>
            <param name="box2DRaycastHitCache">Array to write the results of the Box2D query if used.</param>
        </member>
        <member name="T:Fusion.LagCompensation.RaycastQuery">
            <summary>
            Class that represents a raycast query. Used to query against the <see cref="P:Fusion.NetworkRunner.LagCompensation"/> API.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.RaycastQuery.#ctor(Fusion.LagCompensation.RaycastQueryParams@)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.RaycastQuery"/> with the given <see cref="T:Fusion.LagCompensation.RaycastQueryParams"/>
            </summary>
            <param name="raycastQueryParams">The parameters to be used when creating the query.</param>
        </member>
        <member name="T:Fusion.LagCompensation.RaycastQueryParams">
            <summary>
            Base parameters needed to execute a raycast query
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.RaycastQueryParams.#ctor(Fusion.LagCompensation.QueryParams,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.RaycastQueryParams"/>
            </summary>
            <param name="queryParams">Parameters to be used</param>
            <param name="origin">The raycast origin</param>
            <param name="direction">The raycast direction</param>
            <param name="length">The raycast max length</param>
            <param name="staticHitsCapacity">Capacity for the cached PhysX and Box2D static hits.</param>
        </member>
        <member name="T:Fusion.LagCompensation.SphereOverlapQuery">
            <summary>
            Class that represents a sphere overlap query. Used to query against the <see cref="P:Fusion.NetworkRunner.LagCompensation"/> API.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.SphereOverlapQuery.#ctor(Fusion.LagCompensation.SphereOverlapQueryParams@)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.SphereOverlapQuery"/> with the given <see cref="T:Fusion.LagCompensation.SphereOverlapQueryParams"/>.
            </summary>
            <param name="sphereOverlapParams">The parameters to be used when creating the query.</param>
        </member>
        <member name="M:Fusion.LagCompensation.SphereOverlapQuery.#ctor(Fusion.LagCompensation.SphereOverlapQueryParams@,UnityEngine.Collider[],UnityEngine.Collider2D[])">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.SphereOverlapQuery"/> with the given <see cref="T:Fusion.LagCompensation.SphereOverlapQueryParams"/>.
            </summary>
            <param name="sphereOverlapParams">The parameters to be used when creating the query.</param>
            <param name="physXOverlapHitsCache">Array to write the results of the PhysX query if used.</param>
            <param name="box2DOverlapHitsCache">Array to write the results of the Box2D query if used.</param>
        </member>
        <member name="T:Fusion.LagCompensation.SphereOverlapQueryParams">
            <summary>
            Base parameters needed to execute a sphere overlap query
            </summary>
        </member>
        <member name="M:Fusion.LagCompensation.SphereOverlapQueryParams.#ctor(Fusion.LagCompensation.QueryParams,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>
            Create a new <see cref="T:Fusion.LagCompensation.SphereOverlapQueryParams"/>.
            </summary>
            <param name="queryParams">Parameters to be used</param>
            <param name="center">The query center</param>
            <param name="radius">The query radius</param>
            <param name="staticHitsCapacity">Capacity for the cached PhysX and Box2D static hits.</param>
        </member>
        <member name="T:Fusion.HitboxTypes">
            <summary>
            Defines the collision geometry type of a <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.None">
            <summary>
            [Future Use] to represent a disabled <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.Box">
            <summary>
            Geometry is a box, fill in Extents and (optional) Offset.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.Sphere">
            <summary>
            Geometry is a sphere, fill in Radius and (optional) Offset.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.Capsule">
            <summary>
            Geometry is a capsule, fill in capsule Radius, capsule Height and (optional) Offset.
            </summary>
        </member>
        <member name="T:Fusion.Hitbox">
            <summary>
            Represents a single lag-compensated collider.
            Multiple component instances can be added anywhere in the hierarchy of a <see cref="T:Fusion.NetworkObject"/> which includes a <see cref="T:Fusion.HitboxRoot"/>.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.Type">
            <summary>
            The collision geometry type for this <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.SphereRadius">
            <summary>
            When <see cref="F:Fusion.Hitbox.Type"/> is set to <see cref="F:Fusion.HitboxTypes.Sphere"/>, this defines the local-space geometry for narrow-phase checks.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.CapsuleRadius">
            <summary>
            When <see cref="F:Fusion.Hitbox.Type"/> is set to <see cref="F:Fusion.HitboxTypes.Capsule"/>, this defines the local-space geometry for narrow-phase checks.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.BoxExtents">
            <summary>
            When <see cref="F:Fusion.Hitbox.Type"/> is set to <see cref="F:Fusion.HitboxTypes.Box"/>, this defines the local-space geometry for narrow-phase checks.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.CapsuleHeight">
            <summary>
            When <see cref="F:Fusion.Hitbox.Type"/> is set to <see cref="F:Fusion.HitboxTypes.Capsule"/>, this defines the local-space geometry for narrow-phase checks.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.Offset">
            <summary>
            This <see cref="T:Fusion.Hitbox"/>'s local-space offset from its GameObject position.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.Root">
            <summary>
            Reference to the top-level <see cref="T:Fusion.HitboxRoot"/> component for this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.HitboxIndex">
            <summary>
            The index of this hitbox in the <see cref="F:Fusion.HitboxRoot.Hitboxes"/> array on <see cref="F:Fusion.Hitbox.Root"/>.
            The value is set by the root when initializing the nested hitboxes with <see cref="M:Fusion.HitboxRoot.InitHitboxes"/>.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.HitboxMask">
            <summary>
            Mask to access the state of this hitbox on the root.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.HitboxActive">
            <summary>
            Get or set the state of this Hitbox.
            If a hitbox or its HitboxRoot are not active, it will not be hit by lag-compensated queries.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.ColliderIndex">
            <summary>
            Index assigned to the collider of this hitbox on the lag-compensated snapshots.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.Position">
            <summary>
            World-space position (includes Offset) of this <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.GizmosColor">
            <summary>
            Color used when drawing gizmos for this hitbox.
            </summary>
        </member>
        <member name="M:Fusion.Hitbox.OnDrawGizmos">
            <summary>
            Draws this hitbox gizmo on Unity editor.
            </summary>
        </member>
        <member name="T:Fusion.HitboxManager">
            <summary>
            Entry point for lag compensated <see cref="T:Fusion.Hitbox"/> queries, which
            maintains a history buffer, and provides lag compensated raycast and overlap methods.
            Singleton instance is accessible through the property Runner.LagCompensation.
            <para>Usage - Call any of the following methods:</para>
            <code>HitboxManager.Raycast()<br></br>
            HitboxManager.RaycastAll()<br></br>
            HitboxManager.PositionRotation()<br></br>
            HitboxManager.OverlapSphere()</code>
            <para>These methods use the history buffer to perform a <see cref="T:Fusion.Hitbox"/> query against a state consistent with how the indicated <see cref="T:Fusion.PlayerRef"/> perceived them locally.</para>
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.BVHDepth">
            <summary>
            Debug data from Broadphase BVH (tree depth).
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.BVHNodes">
            <summary>
            Debug data from Broadphase BVH (total nodes count).
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.TotalHitboxes">
            <summary>
            Debug data from lag compensation history (registered <see cref="T:Fusion.Hitbox"/> count).
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.DrawInfo">
            <summary>
            Debug data used to draw the BVH nodes and the lag compensation history.
            </summary>
        </member>
        <member name="M:Fusion.HitboxManager.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,Fusion.PlayerRef,Fusion.LagCompensatedHit@,System.Int32,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="player">Player who "owns" this raycast. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hit">Raycast results will be filled in here.</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>True if something is hit</returns>
        </member>
        <member name="M:Fusion.HitboxManager.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},Fusion.LagCompensatedHit@,System.Int32,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="tick">Simulation tick number to use as the time reference for the lag compensation (use this for server AI, and similar).</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hit">Raycast results will be filled in here.</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>True if something is hit</returns>
        </member>
        <member name="M:Fusion.HitboxManager.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,Fusion.PlayerRef,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,System.Boolean,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            Important: results are NOT sorted by distance.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="player">Player who "owns" this raycast. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,System.Boolean,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            Important: results are NOT sorted by distance.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="tick">Simulation tick number to use as the time reference for the lag compensation (use this for server AI, and similar).</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapSphere(UnityEngine.Vector3,System.Single,Fusion.PlayerRef,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated overlap sphere query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Sphere center, in world-space</param>
            <param name="radius">Sphere radius</param>
            <param name="player">Player who "owns" this overlap. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapSphere(UnityEngine.Vector3,System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated overlap sphere query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Sphere center, in world-space</param>
            <param name="radius">Sphere radius</param>
            <param name="tick">The tick to be queried</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapBox(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,Fusion.PlayerRef,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated box overlap query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="center">Center of the box in world space.</param>
            <param name="extents">Half of the size of the box in each dimension.</param>
            <param name="orientation">Rotation of the box.</param>
            <param name="player">Player who "owns" this overlap. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapBox(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated box overlap query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="center">Center of the box in world space.</param>
            <param name="extents">Half of the size of the box in each dimension.</param>
            <param name="orientation">Rotation of the box.</param>
            <param name="tick">The exact tick to be queried</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>) or Box2D (<see cref="F:Fusion.HitOptions.IncludeBox2D"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.PositionRotation(Fusion.Hitbox,System.Int32,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Single})">
            <summary>
            Performs a lag-compensated query for a specific Hitbox position and rotation.
            </summary>
            <param name="hitbox">The target hitbox to be queried in the past</param>
            <param name="tick">The tick to be queried</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <paramref name="subtickAccuracy"/> is requested, the query will return the hitbox state interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <paramref name="subtickAccuracy"/> is requested, the query will return the hitbox state interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="position">Will be filled with the hitbox position at the time of the tick</param>
            <param name="rotation">Will be filled with the hitbox rotation at the time of the tick</param>
            <param name="subtickAccuracy">If the query should interpolate between ticks to reflect exactly what was seen on the client.</param>
        </member>
        <member name="M:Fusion.HitboxManager.PositionRotation(Fusion.Hitbox,Fusion.PlayerRef,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean)">
            <summary>
            Performs a lag-compensated query for a specific Hitbox position and rotation.
            </summary>
            <param name="hitbox">The target hitbox to be queried in the past</param>
            <param name="player">Player who "owns" this overlap. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="position">Will be filled with the hitbox position at the time of the tick</param>
            <param name="rotation">Will be filled with the hitbox rotation at the time of the tick</param>
            <param name="subTickAccuracy">If the query should interpolate between ticks to reflect exactly what was seen on the client.</param>
        </member>
        <member name="M:Fusion.HitboxManager.GetClosestHit(System.Collections.Generic.List{Fusion.LagCompensatedHit})">
            <summary>
            Get the closest hit from a list of <see cref="T:Fusion.LagCompensatedHit"/>.
            </summary>
            <returns>The closest <see cref="T:Fusion.LagCompensatedHit"/> found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.Raycast(Fusion.LagCompensation.RaycastQuery,Fusion.LagCompensatedHit@)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="query">The query containing all necessary information.</param>
            <param name="hit">Raycast results will be filled in here.</param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.RaycastAll(Fusion.LagCompensation.RaycastAllQuery,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Boolean)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="query">The query containing all necessary information.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapSphere(Fusion.LagCompensation.SphereOverlapQuery,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Boolean)">
            <summary>
            Performs a lag-compensated sphere overlap query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="query">The query containing all necessary information.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapBox(Fusion.LagCompensation.BoxOverlapQuery,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Boolean)">
            <summary>
            Performs a lag-compensated box overlap query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> or <see cref="F:Fusion.HitOptions.IncludeBox2D"/> flag is indicated, query will also include static colliders, 
            Unity colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="query">The query containing all necessary information.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or static colliders, if included).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.RegisterHitboxSnapshot(System.Int32,System.Int32)">
            <summary>
            Internal use. Inserts (new ones) and updates all registered hitboxes into lag compensation history.
            </summary>
        </member>
        <member name="M:Fusion.HitboxManager.WriteBenchmarkResults">
            <summary>
            Used internally to write the benchmark results.
            </summary>
        </member>
        <member name="T:Fusion.HitOptions">
            <summary>
            Per-query options for lag compensation (both raycast and overlap).
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.None">
            <summary>
            Default, no extra options.
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.IncludePhysX">
            <summary>
            Add this to include checks against PhysX colliders.
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.IncludeBox2D">
            <summary>
            Add this to include checks against Box2D colliders. If PhysX flag is set, it will be used instead.
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.SubtickAccuracy">
            <summary>
            Subtick accuracy query (exactly like seen by player).
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.IgnoreInputAuthority">
            <summary>
            If the <see cref="T:Fusion.HitboxRoot"/> objects which the player performing the query
            (if specified) has input authority over should be ignored by the query.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensationSettings">
            <summary>
            Settings for lag compensation history.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.HitboxBufferLengthInMs">
            <summary>
            Hitbox snapshot history length in milliseconds.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.HitboxDefaultCapacity">
            <summary>
            Hitbox capacity per snapshot.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.CachedStaticCollidersSize">
            <summary>
            The size of the cached static colliders (PhysX or Box2D) array of the default Lag Compensation Queries.
            </summary>
        </member>
        <member name="P:Fusion.LagCompensationSettings.ExpansionFactor">
            <summary>
            Broadphase BVH node expansion factor (default 20%) for leaf nodes, so updates are not too frequent.
            </summary>
        </member>
        <member name="P:Fusion.LagCompensationSettings.Optimize">
            <summary>
            Optional: tries to optimize broadphase BVH every update. May be removed in the future.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensatedHit">
            <summary>
            Defines a lag compensated query hit result.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Type">
            <summary>
            Hit object source (PhysX or Fusion Hitboxes).
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.GameObject">
            <summary>
            The Unity Game Object that was hit. Its data is not lag compensated.
            This is either the <see cref="F:Fusion.LagCompensatedHit.Hitbox"/>'s or the <see cref="F:Fusion.LagCompensatedHit.Collider"/>'s gameObject,
            depending on the object hit being a lag-compensated Hitbox or a regular Unity collider, respectively.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Normal">
            <summary>
            Surface normal (if requested) of the hit, at the lag compensated time.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Point">
            <summary>
            Point of impact of the hit, at the lag compensated time.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Distance">
            <summary>
            Distance (if requested) to hit, at the lag compensated time.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Hitbox">
            <summary>
            Fusion's <see cref="F:Fusion.LagCompensatedHit.Hitbox"/>. Null in case the hit was on PhysX or Box2D.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Collider">
            <summary>
            PhysX collider hit. Null in case hit is a Fusion <see cref="F:Fusion.LagCompensatedHit.Hitbox"/> or a Box2D hit.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Collider2D">
            <summary>
            Box2D collider hit. Null in case hit is a Fusion <see cref="F:Fusion.LagCompensatedHit.Hitbox"/> or a PhysX hit.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit._sortAux">
            <summary>
            Auxiliary field used when sorting hits in a collection.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensatedHit.op_Explicit(UnityEngine.RaycastHit)~Fusion.LagCompensatedHit">
            <summary>
            Creates a <see cref="T:Fusion.LagCompensatedHit"/> structure from the information on a Unity <see cref="T:UnityEngine.RaycastHit"/>.
            </summary>
            <param name="raycastHit">The <see cref="T:UnityEngine.RaycastHit"/> used as source.</param>
            <returns>The built LagCompensatedHit structure.</returns>
        </member>
        <member name="M:Fusion.LagCompensatedHit.op_Explicit(UnityEngine.RaycastHit2D)~Fusion.LagCompensatedHit">
            <summary>
            Creates a <see cref="T:Fusion.LagCompensatedHit"/> structure from the information on a Unity <see cref="T:UnityEngine.RaycastHit2D"/>.
            </summary>
            <param name="raycastHit2D">The <see cref="T:UnityEngine.RaycastHit2D"/> used as source.</param>
            <returns>The built LagCompensatedHit structure.</returns>
        </member>
        <member name="M:Fusion.LagCompensatedHit.FromHitboxHit(Fusion.LagCompensation.HitboxHit@)">
            <summary>
            Creates a <see cref="T:Fusion.LagCompensatedHit"/> structure from the information on a <see cref="T:Fusion.LagCompensation.HitboxHit"/>.
            </summary>
            <param name="hitboxHit">The <see cref="T:Fusion.LagCompensation.HitboxHit"/> used as source.</param>
            <returns>The built LagCompensatedHit structure.</returns>
        </member>
        <member name="T:Fusion.HitboxRoot">
            <summary>
            Root <see cref="T:Fusion.Hitbox"/> group container. Manages registering/unregistering hitboxes with the group, and defines the broadphase geometry for the group.
            <para><b><i>Broadphase</i></b> is the initial rough query used by raycasts/overlaps/etc to find potential hit candidates, 
            which are then used in the final <b><i>narrowphase</i></b> query.</para>
            </summary>
        </member>
        <member name="T:Fusion.HitboxRoot.ConfigFlags">
            <summary>
            Set of configuration options for a Hitbox Root behaviour.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.ReinitializeHitboxesBeforeRegistration">
            <summary>
            If the collection of hitboxes under a given root should be re-initialized before the Root is registered
            in a hitbox snapshot. If disabled, the hitboxes will be used as configured in edit-time.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.IncludeInactiveHitboxes">
            <summary>
            If Hitboxes on inactive Game Objects should be registered under this root upon initialization.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.Legacy">
            <summary>
            Set of configuration flags that replicate the behaviour as it was before the flag options were added.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.Default">
            <summary>
            Ser of configuration flags with the default behaviour, suitable for most use-cases.
            </summary>
        </member>
        <member name="P:Fusion.HitboxRoot.HitboxRootActive">
            <summary>
            Get or set the state of this HitboxRoot.
            For a hitbox to be hit by lag-compensated queries, both it and its HitboxRoot must be active.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.MAX_HITBOXES">
            <summary>
            The max number of hitboxes allowed under the same root.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.Config">
            <summary>
            Set of configuration options for this Hitbox Root behaviour.
            Check the API documentation for more details on what each flag represents.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.BroadRadius">
            <summary>
            The radius of the broadphase bounding sphere for this <see cref="T:Fusion.Hitbox"/> group. 
            Used by <see cref="T:Fusion.HitboxManager"/> to insert/update lag compensated NetworkObjects into its BVH (bounding volume hierarchy) data structure.
            Be sure this radius encompasses all children <see cref="T:Fusion.Hitbox"/> components (including their full ranges of animation motion).
            We plan to offer an option to dynamically compute the bounding volume, but the performance trade of will still favor a hand-crafted radius.
            <para><b><i>Broadphase</i></b> is the initial rough query used by raycasts/overlaps/etc to find potential hit candidates, 
            which are then used in the final <b><i>narrowphase</i></b> query.</para>
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.Offset">
            <summary>
            Local-space offset of the broadphase bounding sphere from its transform position.
            <para>Adjust the <see cref="F:Fusion.HitboxRoot.BroadRadius"/> and <see cref="F:Fusion.HitboxRoot.Offset"/> until the sphere gizmo (shown in the Unity Scene window) 
            encompasses all children <see cref="T:Fusion.Hitbox"/> components (including their full ranges of animation motion).</para>
            <para><b><i>Broadphase</i></b> is the initial rough query used by raycasts/overlaps/etc to find potential hit candidates, 
            which are then used in the final <b><i>narrowphase</i></b> query.</para>
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.GizmosColor">
            <summary>
            Color used when drawing gizmos for this hitbox.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.Hitboxes">
            <summary>
            All Hitbox instances in hierarchy. Auto-filled at Spawned.
            </summary>
        </member>
        <member name="P:Fusion.HitboxRoot.Manager">
            <summary>
            Reference to associated hitbox manager (from which lag compensated queries can be performed).
            </summary>
        </member>
        <member name="P:Fusion.HitboxRoot.InInterest">
            <summary>
            If this <see cref="T:Fusion.HitboxRoot"/> is in interest for the current local player.
            </summary>
        </member>
        <member name="M:Fusion.HitboxRoot.InitHitboxes">
            <summary>
            Finds child <see cref="T:Fusion.Hitbox"/> components, and adds them to the <see cref="F:Fusion.HitboxRoot.Hitboxes"/> collection.
            </summary>
        </member>
        <member name="M:Fusion.HitboxRoot.SetMinBoundingRadius">
            <summary>
            Sets <see cref="F:Fusion.HitboxRoot.BroadRadius"/> to a rough value which encompasses all <see cref="F:Fusion.HitboxRoot.Hitboxes"/> in their current positions.
            </summary>
        </member>
        <member name="M:Fusion.HitboxRoot.SetHitboxActive(Fusion.Hitbox,System.Boolean)">
            <summary>
            Sets the state of a Hitbox instance under this root.
            Both the hitbox and its root must be active in order for it to be hit by lag-compensated queries.
            </summary>
            <param name="hitbox">A hitbox instance under the hierarchy of this root.</param>
            <param name="setActive">If the hitbox should be activated or deactivated.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:Fusion.Hitbox.HitboxIndex"/> of the <paramref name="hitbox"/> is outside the valid range.</exception>
            <exception cref="T:Fusion.AssertException">In Debug configuration, if the <paramref name="hitbox"/> is not part of this root.</exception>
        </member>
        <member name="M:Fusion.HitboxRoot.IsHitboxActive(Fusion.Hitbox)">
            <summary>
            Checks the state of a Hitbox instance under this root.
            Both the hitbox and its root must be active in order for it to be hit by lag-compensated queries.
            </summary>
            <param name="hitbox">A hitbox instance under the hierarchy of this root.</param>
            <returns>True if the <paramref name="hitbox"/> is part of this root and is active.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:Fusion.Hitbox.HitboxIndex"/> of the <paramref name="hitbox"/> is outside the valid range.</exception>
            <exception cref="T:Fusion.AssertException">In Debug configuration, if the <paramref name="hitbox"/> is not part of this root.</exception>
        </member>
        <member name="T:Fusion.Angle">
            <summary>
            A Networked fusion type for degrees. This can be used with the <see cref="T:Fusion.NetworkedAttribute"/>, in RPCs, or in <see cref="T:Fusion.NetworkInput"/> structs.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Clamp(Fusion.Angle,Fusion.Angle)">
            <summary>
            Clamps the current value to the supplied min-max range.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Min(Fusion.Angle,Fusion.Angle)">
            <summary>
            Returns the smaller of two supplied angles.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Max(Fusion.Angle,Fusion.Angle)">
            <summary>
            Returns the larger of two supplied angles.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Lerp(Fusion.Angle,Fusion.Angle,System.Single)">
            <summary>
            Lerps between two angle values.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Clamp(Fusion.Angle,Fusion.Angle,Fusion.Angle)">
            <summary>
            Returns a the value, clamped to the min-max range.
            </summary>
        </member>
        <member name="T:Fusion.Behaviour">
            <summary>
            Alternative base class to Unity's MonoBehaviour. 
            This allows for components that work both in Unity, as well as the Photon relays.
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.AddBehaviour``1">
            <summary>
            Wrapper for Unity's GameObject.AddComponent()
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.TryGetBehaviour``1(``0@)">
            <summary>
            Wrapper for Unity's GameObject.TryGetComponent()
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.GetBehaviour``1">
            <summary>
            Wrapper for Unity's GameObject.GetComponentInChildren()
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.DestroyBehaviour(Fusion.Behaviour)">
            <summary>
            Wrapper for Unity's GameObject.Destroy()
            </summary>
        </member>
        <member name="T:Fusion.ConnectionType">
            <summary>
            Defines the type of the current connection with the Remote Peer,
            either the Server or a Client
            </summary>
        </member>
        <member name="F:Fusion.ConnectionType.None">
            <summary>
            No connection is currently active
            </summary>
        </member>
        <member name="F:Fusion.ConnectionType.Relayed">
            <summary>
            Connection was accomplished using the Photon Relay Services
            </summary>
        </member>
        <member name="F:Fusion.ConnectionType.Direct">
            <summary>
            Connection was accomplished directly with the remote peer
            </summary>
        </member>
        <member name="P:Fusion.FixedArray`1.Length">
            <summary>
            The fixed size of the array.
            </summary>
        </member>
        <member name="P:Fusion.FixedArray`1.Item(System.Int32)">
            <summary>
            Indexer of array elements.
            </summary>
        </member>
        <member name="M:Fusion.FixedArray`1.#ctor(`0*,System.Int32)">
            <summary>
            NetworkArray constructor.
            </summary>
        </member>
        <member name="M:Fusion.FixedArray`1.ToArray">
            <summary>
            Allocates a new array and copies values from this array. For a non-alloc alternative use <see cref="M:Fusion.FixedArray`1.CopyTo(System.Collections.Generic.List{`0})"/>.
            </summary>
        </member>
        <member name="M:Fusion.FixedArray`1.CopyTo(System.Collections.Generic.List{`0})">
            <summary>
            Adds each value to the supplied List. This does not clear the list, so values will be appended to the existing list.
            </summary>
        </member>
        <member name="M:Fusion.FixedArray`1.CopyTo(`0[],System.Boolean)">
            <summary>
            Copies values to the supplied array.
            </summary>
            <param name="array"></param>
            <param name="throwIfOverflow">If true, this method will throw an error if the supplied array is smaller than this <see cref="T:Fusion.NetworkArray`1"/>. If false, will only copy as many elements as the target array can hold.</param>
        </member>
        <member name="M:Fusion.FixedArray`1.CopyFrom(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of values in from a supplied source array.
            </summary>
            <param name="sourceOffset">Starting index of elements in source.</param>
            <param name="sourceCount">Number of sequential source elements to copy in.</param>
        </member>
        <member name="M:Fusion.FixedArray`1.CopyFrom(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Copies a range of values in from a supplied source list.
            </summary>
            <param name="sourceOffset">Starting index of elements in source.</param>
            <param name="sourceCount">Number of sequential source elements to copy in.</param>
        </member>
        <member name="M:Fusion.FixedArray`1.ToListString">
            <summary>
            Returns the elements of this array as a string, with value separated by \n characters. Specifically for use in the Unity inspector.
            This is private and only is found by NetworkBehaviourEditor using reflection, so do not rename this method.
            </summary>
        </member>
        <member name="M:Fusion.HashCodeUtilities.GetHashDeterministic(System.String,System.Int32)">
            <summary>
            This may only be deterministic on 64 bit systems.
            </summary>
            <param name="str"></param>
            <param name="initialHash"></param>
            <returns></returns>
            
        </member>
        <member name="T:Fusion.InterpolatedErrorCorrectionSettings">
            <summary>
            A set of parameters that tune the interpolated correction of prediction error on transform data.
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">
            <summary>
            <para>
            A factor with dimension of 1/s (Hz) that works as a lower limit for how much
            of the accumulated prediction error is corrected every frame.
            This factor affects both the position and the rotation correction.
            Suggested values are greater than zero and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            </para>
            <para>
            E.g.: MinRate = 3, rendering delta time = (1/60)s: at least 5% (3 * 1/60) of the accumulated error
            will be corrected on this rendered frame. 
            </para>
            <para>
            This threshold might not be respected if the resultant correction magnitude is
            below the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">PosMinCorrection</see>
            or above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">PosTeleportDistance</see>, for the position error,
            or above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">RotTeleportRadians</see>, for the rotation error.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">
            <summary>
            <para>
            A factor with dimension of 1/s (Hz) that works as a upper limit for how much
            of the accumulated prediction error is corrected every frame.
            This factor affects both the position and the rotation correction.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and smaller than half of a target rendering rate.
            </para>
            <para>
            E.g.: MaxRate = 15, rendering delta time = (1/60)s: at maximum 25% (15 * 1/60) of the accumulated error
            will be corrected on this rendered frame. 
            </para>
            <para>
            This threshold might not be respected if the resultant correction magnitude is
            below the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">PosMinCorrection</see> or
            above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">PosTeleportDistance</see>, for the position error,
            or above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">RotTeleportRadians</see>, for the rotation error.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">
            <summary>
            <para>
            The reference for the magnitude of the accumulated position error, in meters,
            at which the position error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">PosMinCorrection</see>
            and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or smaller than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            If, instead, the magnitude is between this threshold and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">
            <summary>
            <para>
            The reference for the magnitude of the accumulated position error, in meters,
            at which the position error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see>
            and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">PosTeleportDistance</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or greater than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            If, instead, the magnitude is between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see> and this threshold,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">
            <summary>
            <para>
            The value, in meters, that represents the minimum magnitude of the accumulated position error
            that will be corrected in a single frame, until it is fully corrected.
            </para>
            <para>
            This setting has priority over the resultant correction rate, i.e. the restriction
            will be respected even if it makes the effective correction rate be different than
            the one computed according to the min/max rates and start/end blend values.
            Suggested values are greater than zero and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see>.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">
            <summary>
            <para>
            The value, in meters, that represents the magnitude of the accumulated
            position error above which the error will be instantaneously corrected,
            effectively teleporting the rendered object to its correct position.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>.
            </para>
            <para>
            This setting has priority over the resultant correction rate, i.e. the restriction
            will be respected even if it makes the effective correction rate be different than
            the one computed according to the min/max rates and start/end blend values.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">
            <summary>
            <para>
            The reference for the magnitude of the accumulated rotation error, in radians,
            at which the rotation error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            Suggested values are smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or smaller than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            If, instead, the magnitude is between this threshold and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">
            <summary>
            <para>
            The reference for the magnitude of the accumulated rotation error, in radians,
            at which the rotation error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">RotBlendStart</see>
            and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">RotTeleportRadians</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or greater than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            If, instead, the magnitude is between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">RotBlendStart</see> and this threshold,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">RotBlendStart</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">
            <summary>
            <para>
            The value, in radians, that represents the magnitude of the accumulated
            rotation error above which the error will be instantaneously corrected,
            effectively teleporting the rendered object to its correct orientation.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>.
            </para>
            <para>
            This setting has priority over the resultant correction rate, i.e. the restriction
            will be respected even if it makes the effective correction rate be different than
            the one computed according to the min/max rates and start/end blend values.
            </para>
            </summary>
        </member>
        <member name="T:Fusion.NetworkArray`1">
            <summary>
            Fusion type for networking arrays. 
            Maximum capacity is fixed, and is set with the <see cref="T:Fusion.CapacityAttribute"/>.<br></br><br></br>
            <para>Typical Usage:
            <code>
            [Networked, Capacity(4)]<br></br>
            NetworkArray&lt;float&gt; syncedArray => default;
            </code></para>
            <para>Optional usage (for NetworkBehaviours ONLY - this is not legal in INetworkStructs):
            <code>
            [Networked, Capacity(4)]<br></br>
            NetworkArray&lt;int&gt; syncedArray { get; } = MakeInitializer(new int[] { 1, 2, 3, 4 });<br></br>
            </code></para>
            <para>Usage for modifying data:
            <code>
            array.Set(123);
            array[0] = 456;
            </code></para>
            </summary>
            <typeparam name="T">T can be a primitive, or an INetworkStruct.</typeparam>
        </member>
        <member name="P:Fusion.NetworkArray`1.Length">
            <summary>
            The fixed size of the array.
            </summary>
        </member>
        <member name="P:Fusion.NetworkArray`1.Item(System.Int32)">
            <summary>
            Indexer of array elements.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.#ctor(System.Byte*,System.Int32,Fusion.IElementReaderWriter{`0})">
            <summary>
            NetworkArray constructor.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.Get(System.Int32)">
            <summary>
            Returns the array value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.Set(System.Int32,`0)">
            <summary>
            Sets the array value at the supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.GetRef(System.Int32)">
            <summary>
            This method is exposed with an extension method to filter
            types to unmanaged ones only. This is not exhaustive,
            as wrapped types are likely to pass this.
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Fusion.NetworkArray`1.ToArray">
            <summary>
            Allocates a new array and copies values from this array. For a non-alloc alternative use <see cref="M:Fusion.NetworkArray`1.CopyTo(System.Collections.Generic.List{`0})"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyTo(System.Collections.Generic.List{`0})">
            <summary>
            Adds each value to the supplied List. This does not clear the list, so values will be appended to the existing list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyTo(`0[],System.Boolean)">
            <summary>
            Copies values to the supplied array.
            </summary>
            <param name="array"></param>
            <param name="throwIfOverflow">If true, this method will throw an error if the supplied array is smaller than this <see cref="T:Fusion.NetworkArray`1"/>. If false, will only copy as many elements as the target array can hold.</param>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyFrom(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of values in from a supplied source array.
            </summary>
            <param name="sourceOffset">Starting index of elements in source.</param>
            <param name="sourceCount">Number of sequential source elements to copy in.</param>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyFrom(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Copies a range of values in from a supplied source list.
            </summary>
            <param name="sourceOffset">Starting index of elements in source.</param>
            <param name="sourceCount">Number of sequential source elements to copy in.</param>
        </member>
        <member name="M:Fusion.NetworkArray`1.ToListString">
            <summary>
            Returns the elements of this array as a string, with value separated by \n characters. Specifically for use in the Unity inspector.
            This is private and only is found by NetworkBehaviourEditor using reflection, so do not rename this method.
            </summary>
        </member>
        <member name="P:Fusion.NetworkArrayReadOnly`1.Length">
            <summary>
            The fixed size of the array.
            </summary>
        </member>
        <member name="P:Fusion.NetworkArrayReadOnly`1.Item(System.Int32)">
            <summary>
            Indexer of array elements.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArrayReadOnly`1.#ctor(System.Byte*,System.Int32,Fusion.IElementReaderWriter{`0})">
            <summary>
            NetworkArrayReadOnly constructor.
            </summary>
        </member>
        <member name="T:Fusion.NetworkDictionary`2">
            <summary>
            Fusion type for networking Dictionaries. 
            Maximum capacity is fixed, and is set with the <see cref="T:Fusion.CapacityAttribute"/>.<br></br><br></br>
            <para>Typical Usage:
            <code>
            [Networked, Capacity(10)]<br></br>
            NetworkDictionary&lt;int, float&gt; syncedDict => default;<br></br>
            </code></para>
            <para>Usage for modifying data:
            <code>
            var dict = syncedDict;
            dict.Add(5, 123);
            dict[5] = 456;
            dict.Remove(5);
            </code></para>
            </summary>
            <typeparam name="K">Key can be a primitive, or an INetworkStruct.</typeparam>
            <typeparam name="V">Value can be a primitive, or an INetworkStruct.</typeparam>
        </member>
        <member name="P:Fusion.NetworkDictionary`2.Count">
            <summary>
            Current number of key/value entries in the Dictionary.
            </summary>
        </member>
        <member name="P:Fusion.NetworkDictionary`2.Capacity">
            <summary>
            The maximum number of entries this dictionary may contain.
            </summary>
        </member>
        <member name="P:Fusion.NetworkDictionary`2.Item(`0)">
            <summary>
            Key indexer. Gets/Sets value for specified key.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Clear">
            <summary>
            Remove all entries from the Dictionary, and clear backing memory.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the Dictionary contains an entry for the given key.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Returns true if the Dictionary contains an entry value which compares as equal to given value.
            </summary>
            <param name="value">The value to compare against.</param>
            <param name="equalityComparer">Specify custom IEqualityComparer to be used for compare.</param>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Get(`0)">
            <summary>
            Returns the value for the given key. Will throw an error if the key is not found.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Set(`0,`1)">
            <summary>
            Sets the value for the given key. Will add a new key if the key does not already exist.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new key value pair to the Dictionary. If the key already exists, will return false.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.TryGet(`0,`1@)">
            <summary>
            Attempts to get the value for a given key. If found, returns true.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">Returns value of removed item. Returns default value if key did not exist.</param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Remove(`0)">
            <summary>
            Remove entry from Dictionary.
            </summary>
            <param name="key"></param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes entry from Dictionary. If successful (key existed), returns true and the value of removed item.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">Returns value of removed item. Returns default value if key did not exist.</param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="P:Fusion.NetworkDictionaryReadOnly`2.Count">
            <summary>
            Current number of key/value entries in the Dictionary.
            </summary>
        </member>
        <member name="P:Fusion.NetworkDictionaryReadOnly`2.Capacity">
            <summary>
            The maximum number of entries this dictionary may contain.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionaryReadOnly`2.Get(`0)">
            <summary>
            Returns the value for the given key. Will throw an error if the key is not found.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionaryReadOnly`2.TryGet(`0,`1@)">
            <summary>
            Attempts to get the value for a given key. If found, returns true.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">Returns value of removed item. Returns default value if key did not exist.</param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="T:Fusion.INetworkInput">
            <summary>
            Flag interface for custom NetworkInput structs.
            </summary>
        </member>
        <member name="T:Fusion.NetworkInput">
            <summary>
            Translates <see cref="T:Fusion.INetworkInput"/> structs and represents them in Fusions's unsafe allocated memory.
            </summary>
        </member>
        <member name="M:Fusion.NetworkInput.TryGet``1(``0@)">
            <summary>
            Tries to export data as the indicated T <see cref="T:Fusion.INetworkInput"/> struct.
            </summary>
        </member>
        <member name="M:Fusion.NetworkInput.TrySet``1(``0)">
            <summary>
            Tries to import data from a <see cref="T:Fusion.INetworkInput"/> struct.
            </summary>
        </member>
        <member name="T:Fusion.NetworkLinkedList`1">
            <summary>
            Fusion type for networking LinkedLists. 
            Maximum capacity is fixed, and is set with the <see cref="T:Fusion.CapacityAttribute"/>.<br></br><br></br>
            Typical Usage:
            <para><code>
            [Networked, Capacity(10)]<br></br>
            NetworkLinkedList&lt;int&gt; syncedLinkedList => default;
            </code></para>
            <para>Optional usage (for NetworkBehaviours ONLY - this is not legal in INetworkStructs):
            <code>
            [Networked, Capacity(4)]<br></br>
            NetworkLinkedList&lt;int&gt; syncedLinkedList { get; } = MakeInitializer(new int[] { 1, 2, 3, 4 });<br></br>
            </code></para>
            <para>Usage for modifying data:
            <code>
            var list = syncedLinkedList;
            list.Add(123);
            list[0] = 456;
            list.Remove(0);
            </code></para>
            </summary>
            <typeparam name="T">T can be a primitive, or an INetworkStruct.</typeparam>
        </member>
        <member name="P:Fusion.NetworkLinkedList`1.Count">
            <summary>
            Returns the current element count.
            </summary>
        </member>
        <member name="P:Fusion.NetworkLinkedList`1.Capacity">
            <summary>
            Returns the max element count.
            </summary>
        </member>
        <member name="P:Fusion.NetworkLinkedList`1.Item(System.Int32)">
            <summary>
            Element indexer.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Clear">
            <summary>
            Removes and clears all list elements.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Contains(`0)">
            <summary>
            Returns true if the value already exists in the list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns true if the value already exists in the list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Set(System.Int32,`0)">
            <summary>
            Sets the value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Get(System.Int32)">
            <summary>
            Returns the value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.IndexOf(`0)">
            <summary>
            Returns the index with this value. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index with this value. Returns -1 if not found.
            </summary>
            <param name="equalityComparer">Specify custom IEqualityComparer to be used for compare.</param>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Remove(`0)">
            <summary>
            Removes the first found element with indicated value.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first found element with indicated value.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Add(`0)">
            <summary>
            Adds a value to the end of the list.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Fusion.NetworkLinkedListReadOnly`1.Count">
            <summary>
            Returns the current element count.
            </summary>
        </member>
        <member name="P:Fusion.NetworkLinkedListReadOnly`1.Capacity">
            <summary>
            Returns the max element count.
            </summary>
        </member>
        <member name="P:Fusion.NetworkLinkedListReadOnly`1.Item(System.Int32)">
            <summary>
            Element indexer.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedListReadOnly`1.Contains(`0)">
            <summary>
            Returns true if the value already exists in the list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedListReadOnly`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns true if the value already exists in the list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedListReadOnly`1.Get(System.Int32)">
            <summary>
            Returns the value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedListReadOnly`1.IndexOf(`0)">
            <summary>
            Returns the index with this value. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedListReadOnly`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index with this value. Returns -1 if not found.
            </summary>
            <param name="equalityComparer">Specify custom IEqualityComparer to be used for compare.</param>
        </member>
        <member name="T:Fusion.NetworkRNG">
            <summary>
            PCG32 random generator, 16 bytes in size.
            <a href="http://www.pcg-random.org">http://www.pcg-random.org</a>
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_32_32_ToUnitDoubleInclusive">
            <summary>
            0x1.00000001p-32 aka 0x3df0000000100000
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_32_32_ToUnitDoubleExclusive">
            <summary>
            0x1p-32 aka 0x3df0000000000000
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_8_24_ToUnitSingleInclusive">
            <summary>
            0x1.000002p-24 aka 0x33800001
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_8_24_ToUnitSingleExclusive">
            <summary>
            0x1p-24 aka 0x33800000
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.Next">
            <summary>
            Returns a random Double within [0, 1] (range is inclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextExclusive">
            <summary>
            Returns a random Double within [0, 1) (range is exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextSingle">
            <summary>
            Returns a random Single within [0, 1] (range is inclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextSingleExclusive">
            <summary>
            [0, 1)
            Returns a random Single within [0, 1) (range is exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextInt32">
            <summary>
            [int.MinValue, int.MaxValue]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextUInt32">
            <summary>
            [0, uint.MaxValue]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.Double,System.Double)">
            <summary>
            Returns a random Double within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.Single,System.Single)">
            <summary>
            Returns a random Single within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeExclusive(System.Int32,System.Int32)">
            <summary>
            Returns a random Int32 within [minInclusive, maxExclusive) (range is exclusive).
            If minInclusive and maxExclusive are equal, then the "exclusive rule" is ignored and minInclusive will be returned.
            If minInclusive is greater than maxExclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.Int32,System.Int32)">
            <summary>
            Returns a random Int32 within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeExclusive(System.UInt32,System.UInt32)">
            <summary>
            Returns a random UInt32 within [minInclusive, maxExclusive) (range is exclusive).
            If minInclusive and maxExclusive are equal, then the "exclusive rule" is ignored and minInclusive will be returned.
            If minInclusive is greater than maxExclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.UInt32,System.UInt32)">
            <summary>
            Returns a random UInt32 within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="T:Fusion.NetworkString`1">
            <summary>
            Fixed-size UTF32 string. All operations are alloc-free, except for converting to <see cref="T:System.String"/>.
            </summary>
            <typeparam name="Size"></typeparam>
        </member>
        <member name="P:Fusion.NetworkString`1.Capacity">
            <summary>
            Maximum UTF32 string length.
            </summary>
        </member>
        <member name="P:Fusion.NetworkString`1.Value">
            <summary>
            Converts to/from regular UTF16 string. Setter is alloc-free. Use <see cref="!:Get(ref string, bool)"/>
            to get possibly alloc-free conversion.
            </summary>
        </member>
        <member name="P:Fusion.NetworkString`1.Length">
            <summary>
            Number of UTF32 scalars. It is equal or less than <see cref="M:Fusion.NetworkString`1.GetCharCount"/> or the length
            of <see cref="P:Fusion.NetworkString`1.Value"/>, because those use UTF16 encoding, which needs two characters to encode
            some values.
            </summary>
        </member>
        <member name="P:Fusion.NetworkString`1.Item(System.Int32)">
            <summary>
            Returns UTF32 scalar at <paramref name="index"/> position. To iterate over characters,
            use <see cref="M:Fusion.NetworkString`1.GetEnumerator"/>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkString`1.Get(System.String@)">
            <summary>
            Checks if <paramref name="cache"/> is equivalent and if not converts to UTF16 and
            stores the result in <paramref name="cache"/>.
            </summary>
            <param name="cache"></param>
            <param name="ignoreCase"></param>
            <returns>False if no conversion was performed, true otherwise.</returns>
        </member>
        <member name="M:Fusion.NetworkString`1.Set(System.String)">
            <summary>
            Converts <paramref name="value"/> to UTF32 string and stores it internally.
            </summary>
            <param name="value"></param>
            <returns>False if <paramref name="value"/> was too long to fit and had to be trimmed.</returns>
        </member>
        <member name="M:Fusion.NetworkString`1.GetCharCount">
            <summary>
            Calculates the length of the equivalent UTF16 string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.PlayerRef">
            <summary>
            Represents a Fusion player.
            </summary>
            <para>The PlayerRef, in contrast to the player index, is 1-based. The reason is that default(PlayerRef) will return a "null/invalid" player ref struct for convenience. There are automatic cast operators that can cast an int into a PlayerRef.</para>
            <example><code>
            default(PlayerRef), internally a 0, means NOBODY
            PlayerRef, internally 1, is the same as player index 0
            PlayerRef, internally 2, is the same as player index 1
            </code></example>
        </member>
        <member name="P:Fusion.PlayerRef.None">
            <summary>
            None player
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.MasterClient">
            <summary>
            Special master client player ref value of -1
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.IsRealPlayer">
            <summary>
            If this player ref is a valid unique player index
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.IsNone">
            <summary>
            Returns true if the index value equals -1 (internal raw value of 0), indicating no player. 
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.IsMasterClient">
            <summary>
            Returns true if this PlayerRef indicates the MasterClient rather than a specific Player by Index,
            This is a special flag value which has the encoded index value of -2 (internal raw backing value of -1).
            This is not a valid PlayerRef value in itself, and no Runner will ever be assigned this value as its LocalPlayer.
            It is used by properties like Object.StateAuthority to indicate that the MasterClient has authority
            (which ever player that currently is), rather than a specific Player.
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.RawEncoded">
            <summary>
            Returns the index backing value without modification.
            Unlike <see cref="P:Fusion.PlayerRef.AsIndex"/> which returns the backing value - 1.
            <para>0=None -1=MasterClient >0=PlayerId</para>
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.AsIndex">
            <summary>
            Returns the PlayerRef int as an integer Id value.
            <para>-1=None -2=MasterClient >=0=PlayerId</para>
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.PlayerId">
            <summary>
            Returns the PlayerRef as an integer Id value.
            <para>-1=None -2=MasterClient</para>
            </summary>
        </member>
        <member name="T:Fusion.RingBuffer`1">
            <summary>
            <para>
            A circular buffer.
            </para>
            <para>
            Normally, you push to the back and pop from the front.
            When it's full, <c>PushBack</c> will remove from the front and <c>PushFront</c> will remove from the back.
            </para>
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            Returns a new <see cref="T:Fusion.RingBuffer`1"/> instance.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Returns a new <see cref="T:Fusion.RingBuffer`1"/> instance.
            </summary>
        </member>
        <member name="P:Fusion.RingBuffer`1.Count">
            <summary>
            The number of items in the buffer.
            </summary>
        </member>
        <member name="P:Fusion.RingBuffer`1.Capacity">
            <summary>
            The maximum number of items that can be in the buffer.
            </summary>
        </member>
        <member name="P:Fusion.RingBuffer`1.IsEmpty">
            <summary>
            <c>True</c> if the buffer contains no items.
            </summary>
        </member>
        <member name="P:Fusion.RingBuffer`1.IsFull">
            <summary>
            <c>True</c> if the buffer contains the maximum number of items.
            </summary>
        </member>
        <member name="P:Fusion.RingBuffer`1.Item(System.Int32)">
            <summary>
            <para>Indexed access to items in the buffer.</para>
            <para>Indexes follow insertion order, i.e. <c>this[0]</c> returns the front item and <c>this[Count - 1]</c> returns the rear item.</para>
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Fusion.RingBuffer`1.Front">
            <summary>
            The front item in the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.Back">
            <summary>
            The back item in the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.PushBack(`0)">
            <summary>
            Inserts an item at the back of the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.PushFront(`0)">
            <summary>
            Inserts an item at the front of the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.PopBack">
            <summary>
            Removes and returns the item at the back of the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.PopFront">
            <summary>
            Removes and returns the item at the front of the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.Clear">
            <summary>
            Removes all items from the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.ToArraySegments">
            <summary>
            Returns an <c>ArraySegment</c> pair, where both segments and the items within them follow insertion order.
            Does not copy.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.ToArray">
            <summary>
            Returns a new array with the buffer's items in insertion order.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate the buffer.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts <c>index</c> into the corresponding index in <c>_buffer</c>.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.Increment(System.Int32)">
            <summary>
            Increments the provided index variable, wrapping around if necessary.
            </summary>
        </member>
        <member name="M:Fusion.RingBuffer`1.Decrement(System.Int32)">
            <summary>
            Decrements the provided index variable, wrapping around if necessary.
            </summary>
        </member>
        <member name="P:Fusion.SceneRef.None">
            <summary>
            None scene
            </summary>
        </member>
        <member name="P:Fusion.SceneRef.IsValid">
            <summary>
            If this scene index is valid
            </summary>
        </member>
        <member name="P:Fusion.SceneRef.AsIndex">
            <summary>
            Returns lower 32 bits as an index.
            </summary>
        </member>
        <member name="M:Fusion.SceneRef.FromPath(System.String)">
            <summary>
            Creates a scene ref from a path. The most common use case for this method is when using Unity's addressable scenes.
            The path is hashed (31 bit), so on rare occasion there may be a hash collision. In such case
            consider renaming a scene or construct your own hash and use <see cref="M:Fusion.SceneRef.FromRaw(System.UInt32)"/>.
            To check if a scene ref is was created for a specific path, use <see cref="M:Fusion.SceneRef.IsPath(System.String)"/>.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.SceneRef.op_Equality(Fusion.SceneRef,Fusion.SceneRef)">
            <summary>
            Returns true if the values are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.SceneRef.op_Inequality(Fusion.SceneRef,Fusion.SceneRef)">
            <summary>
            Returns true if the values are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Fusion.TimeSeries.Count">
            <summary>
            The number of available samples.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Capacity">
            <summary>
            The maximum number samples that can fit in this series.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.IsEmpty">
            <summary>
            <c>True</c> if the series contains zero samples.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.IsFull">
            <summary>
            <c>True</c> if the series contains the maximum number of samples.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Latest">
            <summary>
            The most recent sample.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Avg">
            <summary>
            The arithmetic mean of the samples in the series.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Var">
            <summary>
            The variance of the samples in the series.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Dev">
            <summary>
            The standard deviation of the samples in the series.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Min">
            <summary>
            The smallest value in the series.
            </summary>
        </member>
        <member name="P:Fusion.TimeSeries.Max">
            <summary>
            The largest value in the series.
            </summary>
        </member>
        <member name="M:Fusion.TimeSeries.Add(System.Double)">
            <summary>
            Add a new sample. If the series is full, the oldest sample will be removed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fusion.TimeSeries.Clear">
            <summary>
            Removes all samples and resets statistical values.
            </summary>
        </member>
        <member name="T:Fusion.NetworkId">
            <summary>
            The unique identifier for a network entity.
            </summary>
        </member>
        <member name="F:Fusion.NetworkId.Raw">
             <summary>
            
             </summary>
        </member>
        <member name="P:Fusion.NetworkId.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.NetworkId.IsReserved">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fusion.NetworkId.ToNamePrefixString">
            <summary>
            String conversion specifically for use in prefixing names of GameObjects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.NetworkObject">
            <summary>
            The primary Fusion component for networked GameObject entities. 
            This stores the object's network identity and manages the object's state and input authority. 
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.Id">
            <summary>
            The unique identifier for this network entity. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.IsResume">
            <summary>
            Signal that this <see cref="T:Fusion.NetworkObject"/> comes from a Resume Spawn
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.Runner">
            <summary>
            The <see cref="T:Fusion.NetworkRunner"/> this entity is associated with.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.SortKey">
            <summary>
            Used for whenever objects need to be sorted in a deterministic order, like
            when registering scene objects.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.ReplicateTo">
            <summary>
            Delegate callback used to override if an object should be replicate to a client or not
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.PriorityCallback">
            <summary>
            Delegate callback used to override priority value for a specific object-player pair
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.ObjectInterest">
            <summary>
            How Object Interest is determined for this object. 
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.LastReceiveTick">
            <summary>
            Last tick this object received an update.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.Flags">
            <summary>
            Flags used for network object prefabs and similar 
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.NetworkTypeId">
            <summary>
            The type ID for this prefab or scene object, set when adding to the prefab table and registering scene objects, respectively.
            All spawned instances of this object will retain this value. Use <see cref="T:Fusion.NetworkId"/> for the unique ID of network entries.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.NestedObjects">
            <summary>
            Array of initial child nested <see cref="T:Fusion.NetworkObject"/> entities, that are children of this Object.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.NetworkedBehaviours">
            <summary>
            Array of all <see cref="T:Fusion.NetworkBehaviour"/>s associated with this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.Name">
            <summary>
            The ID + Unity GameObject name for this entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsValid">
            <summary>
            Returns if this network entity is associated with its <see cref="T:Fusion.NetworkRunner"/>, and that runner is not null.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsInSimulation">
            <summary>
            If this object is inserted into the simulation
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.HasInputAuthority">
            <summary>
            Returns if <see cref="P:Fusion.Simulation.LocalPlayer"/> is the designated Input Source for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.HasStateAuthority">
            <summary>
            Returns if <see cref="P:Fusion.Simulation.LocalPlayer"/> is the designated State Source for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsProxy">
            <summary>
            Returns if <see cref="P:Fusion.Simulation.LocalPlayer"/> is neither the Input nor State Source for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.RenderTimeframe">
            <summary>
            Returns the <see cref="T:Fusion.RenderTimeframe"/> for this <see cref="T:Fusion.NetworkBehaviour"/> instance,
            indicating what snapshot data will be used to render it.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.RenderSource">
            <summary>
            Returns the <see cref="T:Fusion.RenderSource"/> for this <see cref="T:Fusion.NetworkBehaviour"/> instance,
            indicating how snapshot data will be used to render it.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.RenderTime">
            <summary>
            Returns the current interpolation time for this object
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.InputAuthority">
            <summary>
            Returns the <see cref="T:Fusion.PlayerRef"/> that has Input Authority over this network entity.
            PlayerRefs are assigned in order from 0 to MaxPlayers-1 and are re-used as players join and leave.
            The only caveat is that the server player (if one exists), always gets the last index no matter how many clients are connected.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.StateAuthority">
            <summary>
            Returns the <see cref="T:Fusion.PlayerRef"/> that has State Authority over this network entity.
            PlayerRefs are assigned in order from 0 to MaxPlayers-1 and are re-used as players join and leave.
            The only caveat is that the server player (if one exists), always gets the last index no matter how many clients are connected.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSpawnable">
            <summary>
            Toggles if this NetworkObject is included in the <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>, which will include the prefab in builds as a Spawnable object.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.GetWordCount(Fusion.NetworkObject)">
            <summary>
            Get the word count for a <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <param name="obj">The object to get the word count from</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Fusion.NetworkObject.GetLocalAuthorityMask">
            <summary>
            Gets a bitmask of <see cref="T:Fusion.AuthorityMasks"/> flags, representing the current local authority over this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.GetRpcSourceAuthorityMask(Fusion.PlayerRef)">
            <summary>
            Gets a bitmask of <see cref="T:Fusion.AuthorityMasks"/> flags, representing the supplied <see cref="T:Fusion.PlayerRef"/> RPC authority for this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.AssignInputAuthority(Fusion.PlayerRef)">
            <summary>
            Sets which <see cref="T:Fusion.PlayerRef"/> has Input Authority for this Object.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.RequestStateAuthority">
            <summary>
            Request state authority over this <see cref="T:Fusion.NetworkObject"/> on shared mode.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.ReleaseStateAuthoirty">
            <summary>
            Release the state authority over this <see cref="T:Fusion.NetworkObject"/> on shared mode.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.RemoveInputAuthority">
            <summary>
            Removes input authority from whichever player has it for this object. Only valid when called on a Host or Server peer.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.SetPlayerAlwaysInterested(Fusion.PlayerRef,System.Boolean)">
            <summary>
            Add or remove specific player interest in this NetworkObject. Only the NetworkObject State Authority can set interest.
            <para>
            <see cref="!:SimulationConfig.ReplicationMode"/> must be set to <see cref="!:SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </para>
            </summary>
            <param name="player"></param>
            <param name="alwaysInterested"></param>
        </member>
        <member name="M:Fusion.NetworkObject.CopyStateFrom(Fusion.NetworkObject)">
            <summary>
            Copies the entire State from another <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <param name="source"><see cref="T:Fusion.NetworkObject"/> to copy the State from</param>
        </member>
        <member name="M:Fusion.NetworkObject.CopyStateFrom(Fusion.NetworkObjectHeaderPtr)">
            <summary>
            Copies the entire State from another <see cref="T:Fusion.NetworkObject"/> based on the <see cref="T:Fusion.NetworkObjectHeaderPtr"/>
            </summary>
            <param name="source"><see cref="T:Fusion.NetworkObjectHeaderPtr"/> to copy the state from</param>
        </member>
        <member name="M:Fusion.NetworkObject.NetworkWrap(Fusion.NetworkRunner,Fusion.NetworkObject)">
            <summary>
            Return the <paramref name="obj"/> <see cref="T:Fusion.NetworkId"/>.
            </summary>
            <param name="runner">The <see cref="T:Fusion.NetworkRunner"/> that <paramref name="obj"/> is assigned to</param>
            <param name="obj">The <see cref="T:Fusion.NetworkObject"/> to get the ID from</param>
            <returns>The <see cref="T:Fusion.NetworkId"/> of the object. Default if the object is not alive (null or destroyed)</returns>
        </member>
        <member name="M:Fusion.NetworkObject.NetworkUnwrap(Fusion.NetworkRunner,Fusion.NetworkId,Fusion.NetworkObject@)">
            <summary>
            Return the <see cref="T:Fusion.NetworkObject"/> reference on <paramref name="result"/> that matches the provided <see cref="T:Fusion.NetworkId"/>
            </summary>
            <param name="runner">The <see cref="T:Fusion.NetworkRunner"/> that will be used to try to find a <see cref="T:Fusion.NetworkObject"/> with ID equals to <paramref name="wrapper"/></param>
            <param name="wrapper">The <see cref="T:Fusion.NetworkId"/> to be searched</param>
            <param name="result">The found <see cref="T:Fusion.NetworkObject"/>. null if the provided <see cref="T:Fusion.NetworkId"/> is not valid</param>
        </member>
        <member name="P:Fusion.NetworkObject.IsSceneObject">
            <summary>
            Returns true if this network entity existed as part of a scene, rather than having been dynamically spawned.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSpawnedPrefabRoot">
            <summary>
            Returns true if this network entity is a spawned prefab's root, rather than being a scene object or a nested prefab object.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSpawnedPrefabNestedObject">
            <summary>
            Returns true if this network entity is a spawned prefab's nested object, rather than being a scene object or a root prefab object.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabRef">
            <summary>
            A decoupled <see cref="T:Fusion.NetworkObject"/> prefab reference. Internally stored as a GUID.
            </summary>
        </member>
        <member name="T:Fusion.NetworkObjectHeader">
            <summary>
            Network object header information for a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObjectHeader.ByteCount">
            <summary>
            how many bytes this headers object is
            </summary>
        </member>
        <member name="M:Fusion.NetworkObjectHeaderSnapshot.BuildCRC">
            <summary>
            Compute the CRC of this Object Snapshot
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.INetworkObjectProvider">
            <summary>
            Interface which defines the handlers for <see cref="T:Fusion.NetworkRunner"/> Spawn() and Despawn() actions. 
            Passing an instance of this interface to <see cref="M:Fusion.NetworkRunner.StartGame(Fusion.StartGameArgs)"/> 
            as the <see cref="F:Fusion.StartGameArgs.ObjectProvider"/> argument value will assign that instance 
            as the handler for runner Spawn() and Despawn() actions.
            By default (if <see cref="F:Fusion.StartGameArgs.ObjectProvider"/> == null) actions will use Instantiate(), and Despawn() actions will use Destroy().
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabAcquireContext.HasHeader">
            <summary>
            If the Header is not null.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabAcquireContext.Data">
            <summary>
            Data pointer to the first word of this <see cref="T:Fusion.NetworkObject"/>'s data block.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObjectStats.InBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.NetworkObjectStats.OutBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.NetworkObjectStats.InUpdates">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.NetworkObjectStats.OutUpdates">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.NetworkObjectStats.AreaOfInterestPlayerCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fusion.NetworkObjectTypeId">
            <summary>
            ID for a <see cref="T:Fusion.NetworkObject"/> Prefab which has been cataloged in a <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkObjectTypeId.EqualityComparer">
            <summary>
            <see cref="T:Fusion.NetworkObjectTypeId"/> Comparer
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabId">
            <summary>
            ID for a <see cref="T:Fusion.NetworkObject"/> Prefab which has been cataloged in a <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabInfo">
            <summary>
            Meta data for a <see cref="T:Fusion.NetworkObject"/> prefab which has been cataloged in a <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabInfo.Prefab">
            <summary>
            Prefab ID.
            Use <see cref="M:Fusion.NetworkPrefabTable.TryAdd(Fusion.NetworkObjectGuid,Fusion.INetworkPrefabSource,Fusion.NetworkPrefabId@)"/> 
            to look up the actual prefab reference in the <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabInfo.Header">
            <summary>
            Header data for the <see cref="T:Fusion.NetworkObject"/> prefab.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabInfo.IsSynchronous">
            <summary>
            Is the prefab supposed to be loaded in a synchronous way. Fusion will report an error
            if this field is set to true and no prefab is returned by <see cref="T:Fusion.INetworkObjectProvider"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabInfo.HasHeader">
            <summary>
            If the Header is not null.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabInfo.Data">
            <summary>
            Data pointer to the first word of this <see cref="T:Fusion.NetworkObject"/>'s data block.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabTable._sources">
            <summary>
            All prefab sources.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabTable._acquireMask">
            <summary>
            Acquired prefabs mask.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabTable._acquireData">
            <summary>
            Data about acquired prefabs. Only indices matched by <see cref="F:Fusion.NetworkPrefabTable._acquireMask"/> are valid.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabTable._guidToIndex">
            <summary>
            Translates guid to index in <see cref="F:Fusion.NetworkPrefabTable._sources"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabTable._version">
            <summary>
            Incremented every time a change occurs.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabTable.Prefabs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fusion.AuthorityMasks">
            <summary>
            Flag constants for input and state authority.
            </summary>
        </member>
        <member name="T:Fusion.RpcAttribute">
            <summary>
            Flags a method as being a networked Remote Procedure Call.
            Only usable in a NetworkBehaviour. 
            Calls to this method (from the indicated allowed <see cref="T:Fusion.RpcSources"/>) will generate a network message,
            which will execute the method remotely on the indicated <see cref="T:Fusion.RpcTargets"/>.
            The RPC method can include an empty <see cref="T:Fusion.RpcInfo"/> argument, that will include meta information about the RPC on the receiving peer.
            <para>Example:</para>
            <code>
            | [Rpc(RpcSources.All, RpcTargets.All, InvokeLocal = false, InvokeResim = false, Channel = RpcChannel.Reliable, TickAligned = true)]<br></br>
            | public void RPC_Configure(NetworkObject no, string name, Color color, RpcInfo info = default) { }
            </code>
            To target a specific Player, use the <see cref="T:Fusion.RpcTargetAttribute"/>:
            <code>
            | [Rpc]
            | public void RpcFoo([RpcTarget] PlayerRef targetPlayer) {}
            </code>
            Use <see cref="T:Fusion.RpcInvokeInfo"/> as a return value to access meta information about the RPC send attempt, such as failure to send reasons, message size, etc.
            <para>
            Non-static RPCs are only valid on a <see cref="T:Fusion.NetworkBehaviour"/>.
            Static RPCs can be implemented on <see cref="T:Fusion.SimulationBehaviour"/>s, and do not require a <see cref="T:Fusion.NetworkObject"/> instance.
            Static RPC require the first argument to be NetworkRunner.
            </para>
            Static RPC Example:
            <code>
            | [Rpc]
            | public static void RPC_Configure(NetworkRunner runner) { }
            </code>
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.Sources">
            <summary>
            The legal <see cref="T:Fusion.RpcSources"/> types that can trigger this Rpc. Cast to int.
            Default value is (int)<see cref="F:Fusion.RpcSources.All"/>.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.Targets">
            <summary>
            The <see cref="T:Fusion.RpcTargets"/> types that will receive and invoke this method. Cast to int.
            Default value is (int)<see cref="F:Fusion.RpcTargets.All"/>.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.InvokeLocal">
            <summary>
            Indicates if the method should be called locally (on the RPC caller). This happens immediately.
            Default value is true.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.Channel">
            <summary>
            Specifies which RpcChannel to use. 
            Default value is <see cref="F:Fusion.RpcChannel.Reliable"/>
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.TickAligned">
            <summary>
            Indicates if this RPC's execution will be postponed until the local simulation catches up with the sender's Tick number.
            Even if set to false, the order of Rpcs is always preserved. Rpcs are deferred until all preceding Rpcs have
            executed.
            Default value is true.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.HostMode">
            <summary>
            Options for when the game is run in <see cref="F:Fusion.SimulationModes.Host"/> mode and RPC is invoked by the host.
            </summary>
        </member>
        <member name="M:Fusion.RpcAttribute.#ctor">
            <summary>
            Constructor for RpcAttributes.
            </summary>
        </member>
        <member name="M:Fusion.RpcAttribute.#ctor(Fusion.RpcSources,Fusion.RpcTargets)">
            <summary>
            Constructor for RpcAttributes.
            </summary>
            <param name="sources">The legal <see cref="T:Fusion.RpcSources"/> types that can trigger this Rpc. Default is <see cref="F:Fusion.RpcSources.All"/></param>
            <param name="targets">The <see cref="T:Fusion.RpcTargets"/> types that will receive and invoke this method. Default is <see cref="F:Fusion.RpcTargets.All"/></param>
        </member>
        <member name="F:Fusion.RpcChannel.Reliable">
            <summary>
            Rpc order preserved, delivery verified, resend in case of a failed delivery. 
            </summary>
        </member>
        <member name="F:Fusion.RpcChannel.Unreliable">
            <summary>
            Rpc order preserved, delivery not verified, no resend attempts.
            </summary>
        </member>
        <member name="T:Fusion.RpcHostMode">
            <summary>
            Options for when the game is run in <see cref="F:Fusion.SimulationModes.Host"/> mode and RPC is invoked by the host.
            </summary>
        </member>
        <member name="F:Fusion.RpcHostMode.SourceIsServer">
            <summary>
            If host invokes RPC <see cref="F:Fusion.RpcInfo.Source"/> will be set to <see cref="P:Fusion.PlayerRef.None"/> (default).
            </summary>
        </member>
        <member name="F:Fusion.RpcHostMode.SourceIsHostPlayer">
            <summary>
            If host invokes RPC <see cref="F:Fusion.RpcInfo.Source"/> will be set to the host's local player.
            </summary>
        </member>
        <member name="T:Fusion.RpcInvokeInfo">
            <summary>
            May be used as an optional <see cref="T:Fusion.RpcAttribute"/> return value. Contains meta data about the RPC send, such as failure to send reasons, culling, message size, etc.
            <para>Example:</para>
            <code>
            | [Rpc]
            | public RpcInvokeInfo RpcFoo(int value) {
            |  return default;
            | }
            |
            | public override void FixedUpdateNetwork() {
            |   var info = RpcFoo();
            |   Debug.Log(info);
            | }
            </code>
            </summary>
        </member>
        <member name="T:Fusion.RpcLocalInvokeResult">
            <summary>
            Results for the local RPC Invocation of the RPC method.
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.Invoked">
            <summary>
            RPC has been invoked locally.
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.NotInvokableLocally">
            <summary>
            Not invoked locally because <see cref="P:Fusion.RpcAttribute.InvokeLocal"/> is false.
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.NotInvokableDuringResim">
            <summary>
            Not invoked locally because <see cref="P:Fusion.RpcAttribute.InvokeResim"/> is false and simulation stage is <see cref="F:Fusion.SimulationStages.Resimulate"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.InsufficientSourceAuthority">
            <summary>
            Not invoked because source <see cref="T:Fusion.NetworkObject"/> current authority does not match flags set in <see cref="P:Fusion.RpcAttribute.Sources"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.InsufficientTargetAuthority">
            <summary>
            Not invoked because target player is local and this <see cref="T:Fusion.NetworkObject"/> current authority does not match flags set in <see cref="P:Fusion.RpcAttribute.Targets"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.TagetPlayerIsNotLocal">
            <summary>
            Not invoked because target player is not local.
            </summary>
        </member>
        <member name="T:Fusion.RpcSendCullResult">
            <summary>
            Results for the RPC message send operation. Note: Some individual targets may be culled even if the send operation succeeds.
            Information about culled targets can be found in <see cref="F:Fusion.RpcInvokeInfo.SendResult"/>.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.NotCulled">
            <summary>
            RPC has been sent. Check <see cref="F:Fusion.RpcInvokeInfo.SendResult"/> for details.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.NotInvokableDuringResim">
            <summary>
            Send culled because <see cref = "P:Fusion.RpcAttribute.InvokeLocal" /> is false.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.InsufficientSourceAuthority">
            <summary>
            Send culled because source <see cref="T:Fusion.NetworkObject"/> current authority does not match flags set in <see cref="P:Fusion.RpcAttribute.Sources"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.NoActiveConnections">
            <summary>
            Send culled because there are no active connections.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.TargetPlayerUnreachable">
            <summary>
            Send culled because target player does not exist.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.TargetPlayerIsLocalButRpcIsNotInvokableLocally">
            <summary>
            Send culled because target player is local and <see cref="P:Fusion.RpcAttribute.InvokeLocal"/> is false.
            </summary>
        </member>
        <member name="T:Fusion.RpcSendResult">
            <summary>
            RPC send operation result information.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendResult.Result">
            <summary>
            Result flags for the RPC send operation.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendResult.MessageSize">
            <summary>
            The size of the RPC message.
            </summary>
        </member>
        <member name="T:Fusion.RpcTargetAttribute">
            <summary>
            RPC attribute used to indicate a specific target player for an RPC when sending from one player to another. 
            RPC is sent to the server, and then is forwarded to the specified player.
            Usage:
            <code>
            |  [Rpc]
            |  public void RpcFoo([RpcTarget] PlayerRef targetPlayer) { }
            </code>
            </summary>
        </member>
        <member name="T:Fusion.HostMigrationConfig">
            <summary>
            Project configuration settings specific to how the Host Migration behaves.
            </summary>
        </member>
        <member name="F:Fusion.HostMigrationConfig.EnableAutoUpdate">
            <summary>
            Enabled the Host Migration feature
            </summary>
        </member>
        <member name="F:Fusion.HostMigrationConfig.UpdateDelay">
            <summary>
            Delay between Host Migration Snapshot updates
            </summary>
        </member>
        <member name="T:Fusion.HostMigrationToken">
            <summary>
            Transitory Holder with all necessary information to restart the Fusion Runner
            after the Host Migration has completed
            </summary>
        </member>
        <member name="P:Fusion.HostMigrationToken.GameMode">
            <summary>
            New GameMode the local peer will assume after the Host Migration
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner">
            <summary>
            Host Migration related code in order to get a copy of the Simulation State
            </summary>
            <summary>
            Host Migration related code in order to get a copy of the Simulation State
            </summary>
            <summary>
            Represents a Server or Client Simulation.
            </summary>
            <summary>
            All Scene related API and fields
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsResume">
            <summary>
            if this instance is a resume (host migration)
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.PushHostMigrationSnapshot">
            <summary>
            Compute and send a Host Migration Snapshot to the Photon Cloud
            </summary>
            <returns>Task with the result of the operation. True if it was successful, false otherwise.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetResumeSnapshotNetworkObjects">
            <summary>
            Iterate over the old NetworkObjects from the Resume Snapshot
            </summary>
            <returns>Iterable list of <see cref="T:Fusion.NetworkObject"/></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetResumeSnapshotNetworkSceneObjects">
            <summary>
            Iterate over the Scene NetworkObjects from the Resume Snapshot while giving the reference of the old 
            Snapshot data associated with that particular Scene Object
            </summary>
            <returns>Iterable list of Scene <see cref="T:Fusion.NetworkObject"/> and Scene Object Header</returns>
        </member>
        <member name="F:Fusion.NetworkRunner._hostSnapshotTempData">
            <summary>
            Temporary Host Migration Snapshot data buffer
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.HostSnapshotTransferDataSize">
            <summary>
            Temporary Host Migration Snapshot Data buffer size
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetNetworkObjectFromResumeSnapshot(Fusion.NetworkObjectHeaderPtr,System.Collections.Generic.Dictionary{Fusion.NetworkId,Fusion.NetworkObjectHeaderPtr},System.Collections.Generic.Dictionary{Fusion.NetworkId,System.Collections.Generic.List{Fusion.NetworkId}})">
            <summary>
            Gets a temporary representation of a <see cref="T:Fusion.NetworkObject"/> from the old Server Snapshot
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SetupHostMigration(Fusion.Protocol.HostMigration)">
            <summary>
            Setup Host Migration information
            </summary>
            <param name="hostMigration"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.StartHostMigration(Fusion.Protocol.Snapshot)">
            <summary>
            Start the Host Migration process
            </summary>
            <param name="snapshot">Base Snapshot to be used when restarting the Host</param>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeHostMigration(Fusion.HostMigrationToken)">
            <summary>
            Signal the Host Migration process has started
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SendHostMigrationSnapshot">
            <summary>
            Try to send a Host Snapshot to Plugin 
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetServerSnapshot(System.Byte[]@,Fusion.Tick@,System.UInt32@,System.Int32@)">
            <summary>
            Get the Snapshot Host Migration Data
            </summary>
            <returns>True if the snapshot was properly captured</returns>
        </member>
        <member name="T:Fusion.NetworkRunner.BuildTypes">
            <summary>
            Enumeration of Fusion.Runtime.dll options.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.BuildTypes.Debug">
            <summary>
            Use the Debug version of the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.BuildTypes.Release">
            <summary>
            Use the Debug version of the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.States">
            <summary>
            Initialization stages of Fusion
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.States.Starting">
            <summary>
            Runner is about to start
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.States.Running">
            <summary>
            Runner is running
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.States.Shutdown">
            <summary>
            Runner is shutdown
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.BuildType">
            <summary>
            Get Fusion.Runtime.dll build type.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.OnBeforeSpawned">
            <summary>
            Delegate type for on before spawned callback
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.ObjectDelegate">
            <summary>
            Delegate type for object callback
            </summary>
        </member>
        <member name="E:Fusion.NetworkRunner.ObjectAcquired">
            <summary>
            Event for object acquired
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.DeferredShutdownParams">
            <summary>
            Stores the Shutdown parameters used when requesting a Shutdown from inside a Runner Callback
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSimulationUpdating">
            <summary>
            Is the runner updating the simulation.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._initializeOperation">
            <summary>
            Completion Source for the startup Photon Cloud Operations
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsInitialized">
            <summary>
            Check if the Runner was properly Initialized
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.OnGameStartedInvoked">
            <summary>
            Signal if the OnGameStarted was invoked already 
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.ProvideInput">
            <summary>
            Indicates if this <see cref="T:Fusion.NetworkRunner"/> is collecting <see cref="T:Fusion.PlayerRef"/> <see cref="T:Fusion.INetworkInput"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Topology">
            <summary>
            The current topology used
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Simulation">
            <summary>
            Returns the <see cref="T:Fusion.Simulation"/> for this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Mode">
            <summary>
            Returns the <see cref="T:Fusion.SimulationModes"/> flags for The type of network peer the associated <see cref="T:Fusion.Simulation"/> represents.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Stage">
            <summary>
            Returns the current <see cref="T:Fusion.SimulationStages"/> stage of this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.DeltaTime">
            <summary>
            Returns the fixed tick time interval. Derived from the <see cref="!:SimulationConfig.TickRate"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SimulationTime">
            <summary>
            The time the current State <see cref="!:SimulationSnapshot"/> represents (the most recent FixedUpdateNetwork simulation). 
            Use as an equivalent to Unity's Time.fixedTime.
            Time is relative to Tick 0 (which represents Time 0f).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LocalRenderTime">
            <summary>
            The current time (current State.Time + Simulation.DeltaTime) for predicted objects (objects in the local time frame). 
            Use as an equivalent to Unity's Time.time.
            Time is relative to Tick 0 (which represents Time 0f).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.RemoteRenderTime">
            <summary>
            The current time (current State.Time + Simulation.DeltaTime) for non-predicted objects (objects in a remote time frame). 
            Use as an equivalent to Unity's Time.time.
            Time is relative to Tick 0 (which represents Time 0f).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsRunning">
            <summary>
            Returns if this <see cref="T:Fusion.Simulation"/> is valid and running.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsShutdown">
            <summary>
            If the runner is shutdown
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsShutdownDeferred">
            <summary>
            Has the shutdown been deferred.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsRegularShutdown">
            <summary>
            Are we dealing with a regular, planned shutdown.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LocalAlpha">
            <summary>
            Get the local time alpha value
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LatestServerTick">
            <summary>
            Get the latest confirmed tick of the server we are aware of
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsStarting">
            <summary>
            If the runner is pending to start
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsClient">
            <summary>
            Returns if this <see cref="T:Fusion.Simulation"/> represents a Client connection.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsConnectedToServer">
            <summary>
            Returns if this Client is currently connected to a Remote Server
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsServer">
            <summary>
            Returns if this <see cref="T:Fusion.Simulation"/> represents a Server connection.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsPlayer">
            <summary>
            Returns true if this runner represents a Client or Host. Dedicated servers have no local player and will return false.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSinglePlayer">
            <summary>
            Returns true if this runner was started as single player (Started as <see cref="F:Fusion.SimulationModes.Host"/> with <see cref="F:Fusion.SimulationConfig.PlayerCount"/> = 1).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsLastTick">
            <summary>
            If this is the last tick that is being executed this update
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsFirstTick">
            <summary>
            If this is the first tick that executes this update or re-simulation
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsForward">
            <summary>
            If this is not a re-simulation but a new forward tick
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsResimulation">
            <summary>
            If we are currently executing a client side prediction re-simulation.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.TickRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.State">
            <summary>
            The current state of the runner, if it's Starting, Running, Shutdown
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LocalPlayer">
            <summary>
            Returns a <see cref="T:Fusion.PlayerRef"/> for the local simulation. For a dedicated server <see cref="P:Fusion.PlayerRef.IsRealPlayer"/> will equal false. 
            PlayerRefs are assigned in order from 0 to MaxPlayers-1 and are re-used as players join and leave.
            The only caveat is that the server player (if one exists), always gets the last index no matter how many clients are connected.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Tick">
            <summary>
            The tick associated with the current state of networked objects, or the current simulation tick being processed (when evaluated during FixedUpdateNetwork).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Config">
            <summary>
            Returns the <see cref="T:Fusion.NetworkProjectConfig"/> reference.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Prefabs">
            <summary>
            Reference to the <see cref="T:Fusion.NetworkPrefabTable"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.TicksExecuted">
            <summary>
            Returns how many ticks we executed last update.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.ActivePlayers">
            <summary>
            Returns the collection of <see cref="T:Fusion.PlayerRef"/> objects for this NetworkRunner's <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.ObjectProvider">
            <summary>
            Returns the <see cref="T:Fusion.INetworkObjectProvider"/> instance.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SceneManager">
            <summary>
            Returns the <see cref="T:Fusion.INetworkSceneManager"/> instance.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.OperationsCancellationTokenSource">
            <summary>
            Global CancellationTokenSource for this NetworkRunner Instance
            Used to control all async operations along the life cycle of the Runner
            Should be used in conjunction with <see cref="T:Fusion.Async.TaskManager"/>
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.OperationsCancellationToken">
            <summary>
            Global copy of the Cancellation Token for this NetworkRunner Instance
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LagCompensation">
            <summary>
            Returns the global instance of a lag compensation buffer <see cref="T:Fusion.HitboxManager"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Disconnect(Fusion.PlayerRef,System.Byte[])">
            <summary>
            Disconnect a player from the server
            </summary>
            <param name="player">Player to disconnect</param>
        </member>
        <member name="M:Fusion.NetworkRunner.Disconnect(Fusion.Sockets.NetAddress)">
            <summary>
            Disconnect a client based on its NetAddress
            </summary>
            <param name="address">NetAddress of the client</param>
        </member>
        <member name="M:Fusion.NetworkRunner.Connect(Fusion.Sockets.NetAddress,System.Byte[],System.Byte[])">
            <summary>
            Connect this <see cref="T:Fusion.NetworkRunner"/> as a client to a Server.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Shutdown(System.Boolean,Fusion.ShutdownReason,System.Boolean)">
            <summary>
            Initiates a <see cref="M:Fusion.Simulation.Dispose"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._onGameStartAction">
            <summary>
            OnGameStarted Callback
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeOnGameStartedCallback">
            <summary>
            Invoke OnGameStarted callback
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Initialize(Fusion.NetworkRunnerInitializeArgs)">
            <summary>
            Starts <see cref="T:Fusion.NetworkRunner"/> using the supplied arguments.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SinglePlayerPause">
            <summary>
            Pauses the game in single player
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SinglePlayerContinue">
            <summary>
            Continues a paused game in single player
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SinglePlayerPause(System.Boolean)">
            <summary>
            Sets the paused state in a single player
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInterfaceListsCount(System.Type)">
            <summary>
            Get the number of interfaces of the desired type that are registered on the behaviour updater.
            </summary>
            <param name="type">The interface type</param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInterfaceListHead(System.Type,System.Int32,Fusion.SimulationBehaviour@)">
            <summary>
            Get the interface list head.
            </summary>
            <param name="type">The interface type</param>
            <param name="index">The desired index on the list of behaviourList</param>
            <param name="head">The head reference</param>
            <returns>A disposable <see cref="T:Fusion.SimulationBehaviourListScope"/> to be used on an `using` scope</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInterfaceListPrev(Fusion.SimulationBehaviour)">
            <summary>
            Get the previous behaviour
            </summary>
            <param name="behaviour">The reference behaviour to get the previous one</param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInterfaceListNext(Fusion.SimulationBehaviour)">
            <summary>
            Get the next behaviour
            </summary>
            <param name="behaviour">The reference behaviour to get the next one</param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerActorId(Fusion.PlayerRef)">
            <summary>
            Gets Player's Actor Number (ID).
            
            If used in Shared Mode, every client can get this information.
            If used in Client Server Mode, only the Server is able to get this information.
            </summary>
            <param name="player">PlayerRef to get the Actor Number (ID)</param>
            <returns>Actor Number associated with the PlayerRef, otherwise null.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerUserId(Fusion.PlayerRef)">
            <summary>
            Gets Player's UserID.
            
            If used in Shared Mode, every client can get this information.
            If used in Client Server Mode, only the Server is able to get this information.
            </summary>
            <param name="player">PlayerRef to get the UserID. If no PlayerRef is passed, the UserID of the local client is returned instead.</param>
            <returns>UserID if valid player found, otherwise null.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.SetPlayerObject(Fusion.PlayerRef,Fusion.NetworkObject)">
            <summary>
            Sets the network object associated with this player
            </summary>
            <param name="player"></param>
            <param name="networkObject"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerObject(Fusion.PlayerRef)">
            <summary>
            Gets the network object associated with a specific player
            </summary>
            <param name="player"></param>
            <returns>Network object if one is associated with the player</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetPlayerObject(Fusion.PlayerRef,Fusion.NetworkObject@)">
            <summary>
            Try to gets the <see cref="T:Fusion.NetworkObject"/> associated with a specific player
            </summary>
            <param name="player"></param>
            <param name="networkObject">Network object if one is associated with the player</param>
            <returns>Signals if it was able to get a <see cref="T:Fusion.NetworkObject"/> for the player provided</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetAllBehaviours``1">
            <summary>
            Get a list with all behaviours of the desired type that are registered on the <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <typeparam name="T"><see cref="T:Fusion.SimulationBehaviour"/> type</typeparam>
            <returns>The result list</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetAllBehaviours``1(System.Collections.Generic.List{``0})">
            <summary>
            Add on the list all behaviours of the desired type that are registered on the <see cref="T:Fusion.NetworkRunner"/>.
            Note: The list will not be cleared before adding the results.
            </summary>
            <param name="result">The list to add the behaviours</param>
            <typeparam name="T"><see cref="T:Fusion.SimulationBehaviour"/> type</typeparam>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerRtt(Fusion.PlayerRef)">
            <summary>
            Returns the player round trip time (ping) in seconds
            </summary>
            <param name="playerRef">The player you want the round trip time for</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendRpc(Fusion.SimulationMessage*)">
            <summary>
            Sends RPC message. Not meant to be used directly, ILWeaver calls this.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendRpc(Fusion.SimulationMessage*,Fusion.RpcSendResult@)">
            <summary>
            Sends RPC message. Not meant to be used directly, ILWeaver calls this.
            </summary>
            <param name="message"></param>
            <param name="info"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.IsPlayerValid(Fusion.PlayerRef)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.IsPlayerActive(Fusion.PlayerRef)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerConnectionToken(Fusion.PlayerRef)">
            <summary>
            Returns a copy of the Connection Token used by a Player when connecting to this Server.
            Only available on Server. It will return null if running on a Client or the Connection token is missing
            </summary>
            <param name="player">PlayerRef to check for a Connection Token</param>
            <returns>Copy of the Connection Token</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerConnectionType(Fusion.PlayerRef)">
            <summary>
            Return the <see cref="T:Fusion.ConnectionType"/> with a Remote <see cref="T:Fusion.PlayerRef"/>.
            Valid only when invoked from a Server (<see cref="P:Fusion.NetworkRunner.IsServer"/>)
            </summary>
            <param name="player">Remote Player to check the <see cref="T:Fusion.ConnectionType"/></param>
            <returns><see cref="T:Fusion.ConnectionType"/> with a <see cref="T:Fusion.PlayerRef"/></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetAllBehaviours(System.Type)">
            <summary>
            Returns array of all <see cref="T:Fusion.SimulationBehaviour"/> registered with this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetBehaviourStats(System.Collections.Generic.List{System.ValueTuple{System.Type,Fusion.BehaviourStats}})">
            <summary>
            Populate the provided list with all registered behaviours and their BehaviourStats.
            </summary>
            <param name="result">The list to be populated</param>
            <returns>Returns true if at least one item is added to the list</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.AddCallbacks(Fusion.INetworkRunnerCallbacks[])">
            <summary>
            Register an <see cref="T:Fusion.INetworkRunnerCallbacks"/> instance for callbacks from this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="callbacks"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.RemoveCallbacks(Fusion.INetworkRunnerCallbacks[])">
            <summary>
            Unregister an <see cref="T:Fusion.INetworkRunnerCallbacks"/> instance for callbacks from this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="callbacks"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.RenderInternal">
            <summary>
            This method is meant to be called by <see cref="T:Fusion.INetworkRunnerUpdater"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.UpdateInternal(System.Double)">
            <summary>
            This method is meant to be called by <see cref="T:Fusion.INetworkRunnerUpdater"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.RegisterNetworkCallbacks">
            <summary>
            Search on the runner object for instances of <see cref="T:Fusion.INetworkRunnerCallbacks"/> and register them for callbacks on this <see cref="T:Fusion.NetworkRunner"/>.
            Disabled components are not registered.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SendReliableDataToPlayer(Fusion.PlayerRef,Fusion.Sockets.ReliableKey,System.Byte[])">
            <summary>
            Send an arbitrary data buffer to a target Player
            </summary>
            <param name="player">Player that should receive the buffer</param>
            <param name="data">Buffer to be sent</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendReliableDataToServer(Fusion.Sockets.ReliableKey,System.Byte[])">
            <summary>
            Send an arbitrary data buffer to the Server
            </summary>
            <param name="data">Buffer to be sent</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SetPlayerAlwaysInterested(Fusion.PlayerRef,Fusion.NetworkObject,System.Boolean)">
            <summary>
            Flags this player as always interested in this object. Means it does not have to be in a players area of interest to be replicated. Only the NetworkObject State Authority can set interest.
            </summary>
            <param name="player">The player</param>
            <param name="networkObject">The object</param>
            <param name="alwaysInterested">If he's always interested, or not.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInputForPlayer``1(Fusion.PlayerRef)">
            <summary>
            Returns the <see cref="T:Fusion.NetworkInput"/> data from player, converted to the indicated <see cref="T:Fusion.INetworkInput"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRawInputForPlayer(Fusion.PlayerRef)">
            <summary>
            Returns the unconverted unsafe <see cref="T:Fusion.NetworkInput"/> for the indicated player.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetInputForPlayer``1(Fusion.PlayerRef,``0@)">
            <summary>
            Outputs the <see cref="T:Fusion.NetworkInput"/> from player, translated to the indicated <see cref="T:Fusion.INetworkInput"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.FindObject(Fusion.NetworkId)">
            <summary>
            Get the <see cref="T:Fusion.NetworkObject"/> instance for this <see cref="T:Fusion.NetworkRunner"/> from a <see cref="T:Fusion.NetworkId"/>.
            </summary>
            <param name="oref"></param>
            <returns>null if object cannot be found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryFindObject(Fusion.NetworkId,Fusion.NetworkObject@)">
            <summary>
            Get the <see cref="T:Fusion.NetworkObject"/> instance for this <see cref="T:Fusion.NetworkRunner"/> from a <see cref="T:Fusion.NetworkId"/>.
            </summary>
            <param name="objectId">Object NetworkID to look forward</param>
            <param name="networkObject">NetworkObject reference, if found</param>
            <returns>True if object was found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryFindSceneObject(Fusion.NetworkObjectTypeId,Fusion.NetworkObject@)">
            <summary>
            Try to find an Network Scene Object based on its TypeId.
            </summary>
            <param name="networkObjectTypeId">Object NetworkType ID to look forward</param>
            <param name="networkObject">Scene NetworkObject reference, if found</param>
            <returns>True if object was found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryFindBehaviour(Fusion.NetworkBehaviourId,Fusion.NetworkBehaviour@)">
            <summary>
            Get the <see cref="T:Fusion.NetworkBehaviour"/> instance for this <see cref="T:Fusion.NetworkRunner"/> from a <see cref="T:Fusion.NetworkBehaviourId"/>.
            </summary>
            <param name="bref"></param>
            <param name="behaviour"></param>
            <returns>True if object was found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryFindBehaviour``1(Fusion.NetworkBehaviourId,``0@)">
            <summary>
            Try to find a <see cref="T:Fusion.NetworkBehaviour"/> with the provided NetworkBehaviourId.
            </summary>
            <param name="id">The NetworkBehaviourId to search for</param>
            <param name="behaviour">The behaviour found</param>
            <typeparam name="T">A <see cref="T:Fusion.NetworkBehaviour"/> type</typeparam>
            <returns>Returns true if the behaviour was found and it is alive. False otherwise</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetNetworkedBehaviourFromNetworkedObjectRef``1(Fusion.NetworkId)">
            <summary>
            Tries to return the first instance of T found on the root of a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns>Returns the found component. Null if the <see cref="T:Fusion.NetworkObject"/> cannot be found, or if T cannot be found on the GameObject.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetObjectRefFromNetworkedBehaviour(Fusion.NetworkBehaviour)">
            <summary>
            Tries to return the behaviour <see cref="T:Fusion.NetworkId"/>.
            </summary>
            <param name="behaviour"></param>
            <returns>Returns the <see cref="T:Fusion.NetworkId"/> of the provided behaviour. Returns default if the behaviour is not alive or the <see cref="T:Fusion.NetworkObject"/> that has this behaviour is not valid.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetNetworkedBehaviourId(Fusion.NetworkBehaviour)">
            <summary>
            Tries to return a <see cref="T:Fusion.NetworkBehaviourId"/> for the <see cref="T:Fusion.NetworkBehaviour"/> provided.
            </summary>
            <param name="behaviour"></param>
            <returns>Returns a <see cref="T:Fusion.NetworkBehaviourId"/> to the provided behaviour. Returns default if the behaviour is not alive or the <see cref="T:Fusion.NetworkObject"/> that has this behaviour is not valid.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.SetIsSimulated(Fusion.NetworkObject,System.Boolean)">
            <summary>
            Sets the simulation state for this object, if it takes part in the NetworkFixedUpdate, etc.
            </summary>
            <param name="obj">the object to change state for</param>
            <param name="simulate">true if it should be simulated, false if otherwise</param>
            <returns>true if the state of the object changed, false otherwise</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.SetAreaOfInterestGrid(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the area of interest grid dimensions
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <exception cref="T:System.Exception">Can't change grid size in shared mode</exception>
        </member>
        <member name="M:Fusion.NetworkRunner.SetAreaOfInterestCellSize(System.Int32)">
            <summary>
            Set the area of interest cell size
            </summary>
            <param name="size"></param>
            <exception cref="T:System.Exception">Can't change cell size in shared mode</exception>
        </member>
        <member name="M:Fusion.NetworkRunner.GetAreaOfInterestGizmoData(System.Collections.Generic.List{System.ValueTuple{UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32}})">
            <summary>
            Clears the passed results collection, and adds all current AOI cell data. Each element in the List represents one AOI cell.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetSimulationStats(Fusion.SimulationStats@)">
            <summary>
            Try to get <see cref="T:Fusion.SimulationStats"/> buffer from this NetworkRunner.
            </summary>
            <returns>Returns false if stats were not available.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetPlayerStats(Fusion.PlayerRef,Fusion.SimulationConnectionStats@)">
            <summary>
            Try to get <see cref="T:Fusion.SimulationConnectionStats"/> buffer for a player reference from this NetworkRunner.
            </summary>
            <returns>Returns false if stats were not available.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetObjectStats(Fusion.NetworkId,Fusion.NetworkObjectStats@)">
            <summary>
            Try to get <see cref="T:Fusion.NetworkObjectStats"/> buffer for a <see cref="T:Fusion.NetworkObject"/> from this NetworkRunner.
            </summary>
            <returns>Returns false if stats were not available.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Exists(Fusion.NetworkObject)">
            <summary>
            Returns if the <see cref="T:Fusion.Simulation"/> contains a reference to a <see cref="T:Fusion.NetworkObject"/> in the current State <see cref="!:SimulationSnapshot"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Exists(Fusion.NetworkId)">
            <summary>
            Returns if the <see cref="T:Fusion.Simulation"/> contains a <see cref="T:Fusion.NetworkObject"/> with given <paramref name="id"/> in the current State <see cref="!:SimulationSnapshot"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Despawn(Fusion.NetworkObject)">
            <summary>
            Destroys a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
            <param name="networkObject"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.GetSingleton``1">
            <summary>
            Ensures that a specific <see cref="T:Fusion.SimulationBehaviour"/> component exists on this <see cref="T:Fusion.NetworkRunner"/> gameobject. 
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.HasSingleton``1">
            <summary>
            Returns if a given <see cref="T:Fusion.SimulationBehaviour"/> is present in this <see cref="T:Fusion.NetworkRunner"/> gameobject.
            </summary>
            <returns>Returns true if the <see cref="T:Fusion.SimulationBehaviour"/> was found</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.DestroySingleton``1">
            <summary>
            Removes a specific <see cref="T:Fusion.SimulationBehaviour"/> from this <see cref="T:Fusion.NetworkRunner"/> gameobject, if it exists.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.AddGlobal(Fusion.SimulationBehaviour)">
            <summary>
            Add and register a <see cref="T:Fusion.SimulationBehaviour"/> to this <see cref="T:Fusion.NetworkRunner"/>.
            Note: It should NOT be a <see cref="T:Fusion.NetworkBehaviour"/>
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.RemoveGlobal(Fusion.SimulationBehaviour)">
            <summary>
            Removes a specific <see cref="T:Fusion.SimulationBehaviour"/> from this <see cref="T:Fusion.NetworkObject"/> gameobject, if it exists.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.RemoveSimulationBehavior(Fusion.SimulationBehaviour)">
            <summary>
            Unregister a <see cref="T:Fusion.SimulationBehaviour"/> instance from the <see cref="T:Fusion.SimulationBehaviourUpdater"/> callbacks. 
            Invalid if NetworkRunner has not been started and initialized.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Attach(Fusion.NetworkObject,System.Nullable{Fusion.PlayerRef},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Attaches a user created network object to the network 
            </summary>
            <param name="obj">The object to attach</param>
            <param name="inputAuthority">If assigned who is the default input authority for this object</param>
        </member>
        <member name="M:Fusion.NetworkRunner.AddPlayerAreaOfInterest(Fusion.PlayerRef,UnityEngine.Vector3,System.Single)">
            <summary>
            Call this every FixedUpdateNetwork to add an area of interest for a player.
            Should only be called from the Host/Server in Server client mode.
            Should only be called for the local player in shared mode.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.ClearPlayerAreaOfInterest(Fusion.PlayerRef)">
            <summary>
            Clears the area of interest for a player. This can only be called from the server/host
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.IsInterestedIn(Fusion.NetworkObject,Fusion.PlayerRef)">
            <summary>
            Test if a player has Interest in a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
            <returns>Returns null if interest cannot be determined (clients without State Authority are not aware of other client's Object Interest)</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Attach(Fusion.NetworkObject[],System.Nullable{Fusion.PlayerRef},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Attach and assign to this <see cref="T:Fusion.NetworkRunner"/> the <see cref="T:Fusion.NetworkObject"/> provided.
            Used internally from the default implementation of <see cref="T:Fusion.INetworkSceneManager"/> to register scene objects.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.RegisterSceneObjects(Fusion.SceneRef,Fusion.NetworkObject[],Fusion.NetworkSceneLoadId)">
            <summary>
            Registers 
            </summary>
            <param name="scene"></param>
            <param name="objects"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRpcTargetStatus(Fusion.PlayerRef)">
            <summary>
            Return the <see cref="T:Fusion.RpcTargetStatus"/> for a specific player.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.HasAnyActiveConnections">
            <inheritdoc cref="M:Fusion.Simulation.HasAnyActiveConnections"/>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInstancesEnumerator">
            <summary>
            Get enumerator for the collection of all <see cref="T:Fusion.NetworkRunner"/>s. Allows
            to enumerate alloc-free.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fusion.NetworkRunner.Instances">
            <summary>
            A list of all <see cref="T:Fusion.NetworkRunner"/>s.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._sceneInfoInitial">
             <summary>
             The initial scene info that was used to start the runner. It is consumed before the first tick by the scene authority.
            
             The way this works is a bit complex. The order of things is as follows:
             first update -> BeforeFirstTick -> OnServerStart / OnClientStart (master) -> ConsumeInitialSceneInfo
            
             Only then the initial scene info is consumed and <see cref="M:Fusion.NetworkRunner.SceneInfoUpdate"/> is invoked. Any load/unload calls
             before that get queued and executed after the initial scene info is consumed.
             </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._sceneInfoChangeSource">
            <summary>
            What caused the scene change. This is either set in <see cref="M:Fusion.NetworkRunner.ConsumeInitialSceneInfo(System.Boolean)"/> or when <see cref="P:Fusion.NetworkId.SceneInfo"/> object is updated remotely.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._sceneInfoSnapshot">
             <summary>
             To pretend the scene info is available before the first tick (important for shared mode), we store the copy of initial scene info
             here and modify it/return it instead of the state. After scene info has been consumed, this is no longer needed.
            
             Last used scene info. If <see cref="F:Fusion.NetworkRunner._sceneInfoChangeSource"/> is set this is compared
             to the current scene info and scenes are loaded/unloaded accordingly.
             </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._sceneLoadInitialTCS">
            <summary>
            Completed and nullified once the initial / first remote scene info is consumed. Loads/Unloads that happen before the first tick
            depend on the result of this task.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSceneMaster">
            <summary>
            Is this runner responsible for scene management.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSceneAuthority">
            <summary>
            Is this runner responsible for scene management.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSceneManagerBusy">
            <summary>
            Signals if the <see cref="T:Fusion.INetworkSceneManager"/> instance assigned to this <see cref="T:Fusion.NetworkRunner"/> is busy
            with any scene loading operation.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.CurrentScene">
            <summary>
            Returns the current loaded network scene.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetSceneInfo(Fusion.NetworkSceneInfo@)">
            <summary>
            Tries to get the <see cref="T:Fusion.NetworkSceneInfo"/> of this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="sceneInfo">The result <see cref="T:Fusion.NetworkSceneInfo"/></param>
            <returns>Returns true if it was able to get the scene info </returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetSceneRef(System.String)">
            <inheritdoc cref="M:Fusion.INetworkSceneManager.GetSceneRef(System.String)"/>
        </member>
        <member name="M:Fusion.NetworkRunner.GetSceneRef(UnityEngine.GameObject)">
            <inheritdoc cref="M:Fusion.INetworkSceneManager.GetSceneRef(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Fusion.NetworkRunner.LoadScene(Fusion.SceneRef,UnityEngine.SceneManagement.LoadSceneParameters,System.Boolean)">
            <inheritdoc cref="M:Fusion.INetworkSceneManager.LoadScene(Fusion.SceneRef,Fusion.NetworkLoadSceneParameters)"/>
        </member>
        <member name="M:Fusion.NetworkRunner.UnloadScene(Fusion.SceneRef)">
            <inheritdoc cref="M:Fusion.INetworkSceneManager.UnloadScene(Fusion.SceneRef)"/>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeSceneLoadStart(Fusion.SceneRef)">
            <summary>
            Invoke <see cref="M:Fusion.INetworkRunnerCallbacks.OnSceneLoadStart(Fusion.NetworkRunner)"/> on all implementations
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeSceneLoadDone(Fusion.SceneLoadDoneArgs@)">
            <summary>
            Invoke <see cref="M:Fusion.INetworkRunnerCallbacks.OnSceneLoadDone(Fusion.NetworkRunner)"/> on all implementations
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRunnerForGameObject(UnityEngine.GameObject)">
            <summary>
            Get the <see cref="T:Fusion.NetworkRunner"/> a GameObject instance belongs to.
            </summary>
            <param name="gameObject">GameObject to check for a <see cref="T:Fusion.NetworkRunner"/></param>
            <returns><see cref="T:Fusion.NetworkRunner"/> reference, or null if not found</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRunnerForScene(UnityEngine.SceneManagement.Scene)">
            <summary>
            Get the <see cref="T:Fusion.NetworkRunner"/> from a specific Scene
            </summary>
            <param name="scene">Scene to check for a <see cref="T:Fusion.NetworkRunner"/></param>
            <returns><see cref="T:Fusion.NetworkRunner"/> reference, or null if not found</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPhysicsScene">
            <summary>
            Get the 3D Physics scene being used by this Runner.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPhysicsScene2D">
            <summary>
            Get the 2D Physics scene being used by this Runner.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene(UnityEngine.GameObject)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene``1(``0)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.MoveToRunnerScene``1(``0)">
            <summary>
            Moves an object to the scene of this runner
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component">Component of object to move</param>
        </member>
        <member name="M:Fusion.NetworkRunner.MoveToRunnerScene(UnityEngine.GameObject,System.Nullable{Fusion.SceneRef})">
            <summary>
            Moves an object to the scene of this runner
            </summary>
            <param name="instance"></param>
            <param name="targetSceneRef"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnInternal(Fusion.NetworkRunner.SpawnArgs@)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabId"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkTransform"/> (or any <see cref="T:Fusion.NetworkTRSP"/> derived classes) to replicate the initial transform state.
            </summary>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn``1(``0,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a Component type that is part of a <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <typeparam name="T">Must be a Type derived from <see cref="T:Fusion.SimulationBehaviour"/></typeparam>
            <param name="prefab"><see cref="T:Fusion.SimulationBehaviour"/> used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <returns>T reference, or null if it was not able to spawn the object</returns>"),
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(UnityEngine.GameObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a GameObject. The supplied GameObject must have a <see cref="T:Fusion.NetworkObject"/> component.
            </summary>
            <param name="prefab">A GameObject with a <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObject"/> prefab.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefab">Prefab used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkPrefabRef,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabRef"/>.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabRef">Prefab Ref used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkObjectGuid,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObjectGuid"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabGuid">Object Guid used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkPrefabId,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabId"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="typeId">Prefab ID used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TrySpawn``1(``0,``0@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a Component type that is part of a <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <typeparam name="T">Must be a Type derived from <see cref="T:Fusion.SimulationBehaviour"/></typeparam>
            <param name="prefab"><see cref="T:Fusion.SimulationBehaviour"/> used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <returns>T reference, or null if it was not able to spawn the object</returns>"),
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
        </member>
        <member name="M:Fusion.NetworkRunner.TrySpawn(UnityEngine.GameObject,Fusion.NetworkObject@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a GameObject. The supplied GameObject must have a <see cref="T:Fusion.NetworkObject"/> component.
            </summary>
            <param name="prefab">A GameObject with a <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkSpawnStatus"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TrySpawn(Fusion.NetworkObject,Fusion.NetworkObject@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObject"/> prefab.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefab">Prefab used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkSpawnStatus"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TrySpawn(Fusion.NetworkPrefabRef,Fusion.NetworkObject@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabRef"/>.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabRef">Prefab Ref used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkSpawnStatus"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TrySpawn(Fusion.NetworkObjectGuid,Fusion.NetworkObject@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObjectGuid"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabGuid">Object Guid used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkSpawnStatus"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TrySpawn(Fusion.NetworkPrefabId,Fusion.NetworkObject@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabId"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="typeId">Prefab ID used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
            <returns><see cref="T:Fusion.NetworkSpawnStatus"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnAsync``1(``0,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags,Fusion.NetworkObjectSpawnDelegate)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a Component type that is part of a <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <typeparam name="T">Must be a Type derived from <see cref="T:Fusion.SimulationBehaviour"/></typeparam>
            <param name="prefab"><see cref="T:Fusion.SimulationBehaviour"/> used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <returns>T reference, or null if it was not able to spawn the object</returns>"),
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnAsync(UnityEngine.GameObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags,Fusion.NetworkObjectSpawnDelegate)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a GameObject. The supplied GameObject must have a <see cref="T:Fusion.NetworkObject"/> component.
            </summary>
            <param name="prefab">A GameObject with a <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>, 
            <param name="onCompleted">A callback to fire once the spawn is done.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnAsync(Fusion.NetworkObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags,Fusion.NetworkObjectSpawnDelegate)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObject"/> prefab.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefab">Prefab used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>, 
            <param name="onCompleted">A callback to fire once the spawn is done.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnAsync(Fusion.NetworkPrefabRef,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags,Fusion.NetworkObjectSpawnDelegate)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabRef"/>.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabRef">Prefab Ref used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>, 
            <param name="onCompleted">A callback to fire once the spawn is done.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnAsync(Fusion.NetworkObjectGuid,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags,Fusion.NetworkObjectSpawnDelegate)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObjectGuid"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabGuid">Object Guid used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>, 
            <param name="onCompleted">A callback to fire once the spawn is done.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnAsync(Fusion.NetworkPrefabId,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags,Fusion.NetworkObjectSpawnDelegate)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabId"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="typeId">Prefab ID used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="flags">Spawn flags</param>, 
            <param name="onCompleted">A callback to fire once the spawn is done.</param>
        </member>
        <member name="P:Fusion.NetworkRunner.IsCloudReady">
            <summary>
            Signal if the Local Peer is connected to Photon Cloud and is able to Create/Join Room but also receive Lobby Updates
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.UserId">
            <summary>
            Photon Client UserID
            </summary>
            <remarks>Returns null if Peer is not connected to Photon Cloud</remarks>
        </member>
        <member name="P:Fusion.NetworkRunner.AuthenticationValues">
            <summary>
            <see cref="P:Fusion.NetworkRunner.AuthenticationValues"/> used by this Runner to Authenticate the local peer.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.GameMode">
            <summary>
            Current Game Mode active on the Fusion Simulation
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SessionInfo">
            <summary>
            Stores information about the current running session
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LobbyInfo">
            <summary>
            Signal if the local peer is already inside a Lobby
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._alreadyInitialized">
            <summary>
            Signal if the runner was already initialized. Used to avoid recycling of NetworkRunners.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.CurrentConnectionType">
            <summary>
            Check the current Connection Type with the Remote Server
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.NATType">
            <summary>
            Exposes the current NAT Type from the local Peer
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSharedModeMasterClient">
            <summary>
            Signal if the Local Peer is in a Room and is the Room Master Client
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._startGameOperation">
            <summary>
            Completion Source for the startup Photon Cloud Operations
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._cloudServices">
            <summary>
            Responsible to manage the Photon Cloud related Services
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._cachedRegionSummary">
            <summary>
            The cached region summary for the local player. Initially empty but populated after the first connection.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.JoinSessionLobby(Fusion.SessionLobby,System.String,Fusion.Photon.Realtime.AuthenticationValues,Fusion.Photon.Realtime.FusionAppSettings,System.Nullable{System.Boolean},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Join the Peer to a specific Lobby, either a prebuild or a custom one.
            
            More about matchmaking:
            https://doc.photonengine.com/en-us/fusion/current/manual/matchmaking
            </summary>
            <param name="sessionLobby">Lobby Type to Join</param>
            <param name="lobbyID">Lobby ID</param>
            <param name="authentication">Authentication Values used to authenticate this peer</param>
            <param name="customAppSettings">Custom Photon Application Settings</param>
            <param name="useDefaultCloudPorts">Signal if the LoadBalancingClient should use the Default or Alternative Ports</param>
            <param name="cancellationToken">Optional Cancellation Token</param>
            <param name="useCachedRegions">Signal if the cached regions ping should be used to speed up connection</param>
            <returns>Async Task to Join a Session Lobby. Can be used to wait for the process to be finished.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.StartGame(Fusion.StartGameArgs)">
            <summary>
            Starts the local Fusion Runner and takes care of all major setup necessary
            
            More about matchmaking:
            https://doc.photonengine.com/en-us/fusion/current/manual/matchmaking
            </summary>
            <param name="args">Custom arguments used to setup the Fusion Simulation</param>
            <returns>Task that can be awaited to chain actions</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.ConnectToCloud(Fusion.Photon.Realtime.AuthenticationValues,Fusion.Photon.Realtime.FusionAppSettings,Fusion.CloudCommunicator,System.Threading.CancellationToken,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Connect the local peer to Photon Cloud using an async process.
            </summary>
            <param name="authentication">Authentication Values used to authenticate this peer</param>
            <param name="customAppSettings">Custom Photon Application Settings</param>
            <param name="externalCommunicator">External Communicator that will be reused on restart</param>
            <param name="externalCancellationToken">External CancellationToken</param>
            <param name="useDefaultCloudPorts">Signal if the LoadBalancingClient should use the Default or Alternative Ports</param>
            <param name="projectConfig"></param>
            <param name="useCachedRegions">Signal if the cached regions ping should be used to speed up connection</param>
            <returns>Async Task of the connect to Photon Cloud process. Can be used to wait for the process to be finished.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.DisconnectFromCloud">
            <summary>
            Disconnect the Peer from Photon Cloud
            
            If the Cloud Services were not initialized, it just returns immediately
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.StartGameModeSinglePlayer(Fusion.StartGameArgs)">
            <summary>
            Start Fusion in Single Player Mode
            </summary>
            <param name="args">Initialization Arguments</param>
            <returns>A running Task of the initialization process</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.StartGameModeCloud(Fusion.StartGameArgs)">
            <summary>
            Start Fusion in one of the Cloud Game Modes
            </summary>
            <param name="args">Initialization Arguments</param>
            <returns>A running Task of the initialization process</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.ShutdownAndBuildResult(System.Exception)">
            <summary>
            Shutdown the Fusion Runner based on a arbitrary Exception
            </summary>
            <param name="e">Exception used as base for the Shutdown procedure</param>
            <returns>Awaitable Task of the Shutdown procedure</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeSessionListUpdated(System.Collections.Generic.List{Fusion.SessionInfo})">
            <summary>
            Signal an update on the list of <see cref="P:Fusion.NetworkRunner.SessionInfo"/>
            </summary>
            <param name="sessionList">New Session Info</param>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeCustomAuthenticationResponse(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Signal an update on the list of <see cref="P:Fusion.NetworkRunner.SessionInfo"/>
            </summary>
            <param name="data">Custom Authentication Response</param>
        </member>
        <member name="T:Fusion.INetworkRunnerUpdater">
            <summary>
            Interface which defines the handlers for <see cref="T:Fusion.NetworkRunner"/> Updates. An implementation
            is responsible for calling <see cref="M:Fusion.NetworkRunner.UpdateInternal(System.Double)"/> and <see cref="M:Fusion.NetworkRunner.RenderInternal"/>
            periodically.
            
            An instance of this interface can be passed to <see cref="M:Fusion.NetworkRunner.StartGame(Fusion.StartGameArgs)"/> 
            as the <see cref="F:Fusion.StartGameArgs.Updater"/>. By default (if <see cref="F:Fusion.StartGameArgs.Updater"/> == null)
            Fusion will use <see cref="T:Fusion.NetworkRunnerUpdaterDefault"/>, which invokes <see cref="M:Fusion.NetworkRunner.UpdateInternal(System.Double)"/> before
            script's Update and <see cref="M:Fusion.NetworkRunner.RenderInternal"/> before LateUpdate.
            </summary>
        </member>
        <member name="T:Fusion.NetworkEvents">
            <summary>
            Companion component for <see cref="T:Fusion.NetworkRunner"/>. Exposes <see cref="T:Fusion.INetworkRunnerCallbacks"/> as UnityEvents,
            which can be wired up to other components in the inspector.
            
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig">
            <summary>
            The core Fusion config file that is shared with all peers at startup.
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.PeerModes">
            <summary>
            Options for running one or multiple peers in one Unity instance. 
            Multiple is useful for testing multiple players/clients inside of the Unity editor without needing to build executables.
            Each peer is assigned its own independent physics scene and <see cref="T:Fusion.NetworkRunner"/> instance.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PeerModes.Single">
            <summary>
            This is the normal use case, where every build and the editor run a single server, host or client peer.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PeerModes.Multiple">
            <summary>
            This is the optional use case, which allows running multiple peers in the Unity editor, or in a build.
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.ReplicationFeatures">
            <summary>
            <para>Eventual Consistency <see cref="T:Fusion.NetworkObject"/> state replication options.</para>
            <para>Scheduling enables automatic prioritization of objects when culling occurs
            (when Object's are not replicated due to exceeding per tick data limits, they increase in priority on the following Tick).</para>
            <para>Interest Management enables NetworkObject Area Of Interest and Explicit Interest features.</para>
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.ReplicationFeatures.None">
            <summary>
            No special replication handling. This setting is ideal if your project never exceeds per tick data limits during gameplay.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.ReplicationFeatures.Scheduling">
            <summary>
            When changed Network Objects are not replicated by the server to a client due to culling (data per tick limit was reached)
            the server increases the priority of that Network Object for the next outgoing Tick update to that client.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.ReplicationFeatures.SchedulingAndInterestManagement">
            <summary>
            In addition to scheduling, Interest Management features are also enabled (Area Of Interest and Explicit Interest).
            </summary>
        </member>
        <member name="P:Fusion.NetworkProjectConfig.Global">
            <summary>
            Reference for the default <see cref="T:Fusion.NetworkProjectConfig"/>. By default, loads a resource named "NetworkProjectConfig". This behaviour
            can be changed with an attribute <see cref="T:Fusion.FusionGlobalScriptableObjectLoaderMethodAttribute"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.UnloadGlobal">
            <summary>
            Unloads <see cref="P:Fusion.NetworkProjectConfig.Global"/>, if already loaded. If loading <see cref="P:Fusion.NetworkProjectConfig.Global"/> has faulted, resets the state
            and next call to the <see cref="P:Fusion.NetworkProjectConfig.Global"/> accessor will attempt to load the config again.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CurrentTypeId">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> Type ID
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CurrentVersion">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> version
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Version">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> version
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.TypeId">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> Type ID
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PeerMode">
            <summary>
            Setting for whether multiple peers can run per Unity instance (typically to allow easy testing of multiple peers inside of the editor).
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.LagCompensation">
            <summary>
            Advanced lag compensation buffer settings.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.EnqueueIncompleteSynchronousSpawns">
            <summary>
            This flag changes the behaviour of <see cref="M:Fusion.NetworkRunner.Spawn(UnityEngine.GameObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)"/> to return null (instead of throwing an exception) and <see cref="M:Fusion.NetworkRunner.TrySpawn(UnityEngine.GameObject,Fusion.NetworkObject@,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,Fusion.NetworkSpawnFlags)"/>) to return <see cref="F:Fusion.NetworkSpawnStatus.Queued"/>
            if Fusion was unable to load a prefab synchronously (e.g. because it was Addressable). Fusion will enqueue the spawn and attempt to perform it the next frame, until successful.
            Useful for transition from Fusion 1.x. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.InvokeRenderInBatchMode">
            <summary>
            Signal if the <see cref="M:Fusion.SimulationBehaviour.Render"/> callbacks should be invoked in Batch Mode.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.NetworkIdIsObjectName">
            <summary>
            Signal if the <see cref="T:Fusion.NetworkId"/> of the <see cref="T:Fusion.NetworkObject"/> should be included on the name of the <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.HideNetworkObjectInactivityGuard">
            <summary>
            Inactive <see cref="T:Fusion.NetworkObject"/> need special handling in case they get destroyed without ever being activated. This is achieved
            with adding a nested GameObject called "NetworkObjectInactivityGuard" that tracks the OnDestroy message. <see cref="F:Fusion.NetworkProjectConfig.HideNetworkObjectInactivityGuard"/>
            can be used to control whether these guards are visible in the hierarchy or not.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PrefabTable">
            <summary>
            Reference to the <see cref="T:Fusion.NetworkPrefabTable"/> instance for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Simulation">
            <summary>
            Reference to <see cref="T:Fusion.SimulationConfig"/> settings for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.TimeSynchronizationOverride">
            <summary>
            this can be used to override the time synchronization from code 
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Network">
            <summary>
            Reference to <see cref="T:Fusion.NetworkConfiguration"/> settings for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.HostMigration">
            <summary>
            Reference to <see cref="F:Fusion.NetworkProjectConfig.HostMigration"/> settings for this <see cref="T:Fusion.NetworkProjectConfig"/>
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.NetworkConditions">
            <summary>
            Settings for simulating network conditions of latency and loss.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Heap">
            <summary>
            Heap Settings
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.AssembliesToWeave">
            <summary>
            Names of assemblies Fusion is going to weave. Not case sensitive.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.UseSerializableDictionary">
            <summary>
            Use Fusion.SerializableDictionary to store [Networked] dictionary properties initial value. If unchecked,
            the weaver will emit System.Generic.Dictionary instead - a type that's not Unity-serializable, but custom
            serializers (e.g. Odin) may support it.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.NullChecksForNetworkedProperties">
            <summary>
            If set, the weaver will add a check to all [Networked] properties on each <see cref="T:Fusion.NetworkBehaviour"/>
            to verify if owing <see cref="T:Fusion.NetworkObject"/> has been attached to.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CheckRpcAttributeUsage">
            <summary>
            If set, the weaver will check if <see cref="T:Fusion.RpcAttribute"/> is used in types that do not support it. This requires
            all types to be scanned and can increase weaving duration.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CheckNetworkedPropertiesBeingEmpty">
            <summary>
            If set, the weaver will check if <see cref="T:Fusion.NetworkedAttribute"/> properties getters and setters are empty.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.Copy">
            <summary>
            Make a copy of the <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.ToString">
            <summary>
            ToString() implementation.
            </summary>
        </member>
        <member name="P:Fusion.NetworkProjectConfig.FusionVersionInfo">
            <summary>
            Get the version information for the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.Serialize(Fusion.NetworkProjectConfig)">
            <summary>
            Serialize a <see cref="T:Fusion.NetworkProjectConfig"/> into a JSON string.
            </summary>
            <param name="config">NetworkProjectConfig reference</param>
            <returns>JSON String</returns>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.Deserialize(System.String)">
            <summary>
            De-serialize a <see cref="T:Fusion.NetworkProjectConfig"/> from a JSON string (typically sent by the Room's Creator).
            </summary>
            <param name="data">JSON string of a serialized NetworkProjectConfig</param>
            <returns>NetworkProjectConfig reference de-serialized from JSON string</returns>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.SerializeMinimal(Fusion.NetworkProjectConfig)">
            <summary>
            Remove unnecessary data from serialized version of <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.DefaultResourceName">
            <summary>
            Default file name for the <see cref="T:Fusion.NetworkProjectConfig"/> asset
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.AssetLoadingDelegate">
            <summary>
            <see cref="E:Fusion.NetworkProjectConfig.GlobalAssetLoading"/>
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.AssetUnloadingDelegate">
            <summary>
            <see cref="E:Fusion.NetworkProjectConfig.GlobalAssetUnloading"/>
            </summary>
        </member>
        <member name="E:Fusion.NetworkProjectConfig.GlobalAssetLoading">
            <summary>
            Invoked when a config is a about to be loaded from a default location (a Resource <see cref="F:Fusion.NetworkProjectConfig.DefaultResourceName"/>).
            If the event returns a non-null value, it will accepted as the config source and no attempt
            to load the default asset will be made.
            </summary>
        </member>
        <member name="E:Fusion.NetworkProjectConfig.GlobalAssetUnloading">
            <summary>
            Invoked when a config is about to be unloaded (due to <see cref="M:Fusion.NetworkProjectConfig.UnloadGlobal"/>).
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfigAsset">
            <summary>
            Manages and references the current instance of <see cref="T:Fusion.NetworkProjectConfig"/>
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfigAsset.Prefabs">
            <summary>
            An auto-generated list containing source information (e.g. Resource path, address, static reference) for all the prefabs that can be spawned, i.e. the ones with <see cref="T:Fusion.NetworkObject"/>
            component and <see cref="P:Fusion.NetworkObject.IsSpawnable"/> enabled. 
            <br/>
            Additional prefabs can registered at runtime with <see cref="M:Fusion.NetworkPrefabTable.TryAdd(Fusion.INetworkPrefabSource,Fusion.NetworkPrefabId@)"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfigAsset.BehaviourMeta">
            <summary>
            An auto-generated list containing meta information about all the <see cref="T:Fusion.SimulationBehaviour"/>s in the project, e.g. execution order.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSpawnFlags.DontDestroyOnLoad">
            <summary>
            Object get spawned as DontDestroyOnLoad on all clients.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSpawnFlags.SharedModeStateAuthMasterClient">
            <summary>
            In shared mode, override the state authority to <see cref="P:Fusion.PlayerRef.MasterClient"/>. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkSpawnFlags.SharedModeStateAuthLocalPlayer">
            <summary>
            In shared mode, override the state authority to local player.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunnerCallbackArgs">
            <summary>
            Stores data types used on the <see cref="T:Fusion.INetworkRunnerCallbacks"/> interface
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunnerCallbackArgs.ConnectRequest">
            <summary>
            Data holder of a Connection Request from a remote client
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.RemoteAddress">
            <summary>
            Address of the remote client
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.Accept">
            <summary>
            Accepts the Request
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.Refuse">
            <summary>
            Refuses the Request
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.Waiting">
            <summary>
            Refuses the Request
            </summary>
        </member>
        <member name="T:Fusion.ShutdownReason">
            <summary>
            Describes a list of Reason why the Fusion Runner was Shutdown
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.Ok">
            <summary>
            OK Reason means Fusion was Shutdown by request
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.Error">
            <summary>
            Shutdown was caused by some internal error
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.IncompatibleConfiguration">
            <summary>
            Raised when the peer tries to Join a Room with a mismatching type between ClientServer Mode and Shared Mode.
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.ServerInRoom">
            <summary>
            Raised when the local peer started as a Server and tried to join a Room that already has a Server peer.
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.DisconnectedByPluginLogic">
            <summary>
            Raised when the Peer is disconnected or kicked by a Plugin Logic.
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameClosed">
            <summary>
            Raised when the Game the Peer is trying to Join is Closed
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameNotFound">
            <summary>
            Raised when the Game the Peer is trying to Join does not exist
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.MaxCcuReached">
            <summary>
            Raised when all CCU available for the Photon Application are in use
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.InvalidRegion">
            <summary>
            Raised when the peer is trying to connect to an unavailable or non-existent Region
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameIdAlreadyExists">
            <summary>
            Raised when a Session with the same name was already created
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameIsFull">
            <summary>
            Raised when a peer is trying to join a Room with already the max capacity of players
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.InvalidAuthentication">
            <summary>
            Raised when the Authentication Values are invalid
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.CustomAuthenticationFailed">
            <summary>
            Raised when the Custom Authentication has failed for some other reason
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.AuthenticationTicketExpired">
            <summary>
            Raised when the Authentication Ticket has expired
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.PhotonCloudTimeout">
            <summary>
            Timeout on the Connection with the Photon Cloud
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.AlreadyRunning">
            <summary>
            Raised when Fusion is already running and the StartGame is invoked again
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.InvalidArguments">
            <summary>
            Raised when any of the StartGame arguments does not meet the requirements
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.HostMigration">
            <summary>
            Signal this Runner is shutting down because of a Host Migration is about to happen
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.ConnectionTimeout">
            <summary>
            Connection with a remote server failed by timeout
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.ConnectionRefused">
            <summary>
            Connection with a remote server failed because it was refused
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.OperationTimeout">
            <summary>
            The current operation has timed out
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.OperationCanceled">
            <summary>
            The current operation was canceled
            </summary>
        </member>
        <member name="T:Fusion.INetworkRunnerCallbacks">
            <summary>
            Interface for <see cref="T:Fusion.NetworkRunner"/> callbacks.
            Register a class/struct instance which implements this interface with <see cref="M:Fusion.NetworkRunner.AddCallbacks(Fusion.INetworkRunnerCallbacks[])"/>.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnPlayerJoined(Fusion.NetworkRunner,Fusion.PlayerRef)">
            <summary>
            Callback from a <see cref="T:Fusion.NetworkRunner"/> when a new player has joined.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnPlayerLeft(Fusion.NetworkRunner,Fusion.PlayerRef)">
            <summary>
            Callback from a <see cref="T:Fusion.NetworkRunner"/> when a player has disconnected.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnInput(Fusion.NetworkRunner,Fusion.NetworkInput)">
            <summary>
            Callback from <see cref="T:Fusion.NetworkRunner"/> that polls for user inputs.
            The <see cref="T:Fusion.NetworkInput"/> that is supplied expects:
            <code> 
            input.Set(new CustomINetworkInput() { /* your values */ });
            </code>
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnInputMissing(Fusion.NetworkRunner,Fusion.PlayerRef,Fusion.NetworkInput)">
            <summary>
            
            </summary>
            <param name="runner"></param>
            <param name="input"></param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnShutdown(Fusion.NetworkRunner,Fusion.ShutdownReason)">
            <summary>
            Called when the runner is shutdown
            </summary>
            <param name="runner">The runner being shutdown</param>
            <param name="shutdownReason">Describes the reason Fusion was Shutdown</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnConnectedToServer(Fusion.NetworkRunner)">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> successfully connects to a server or host.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer(Fusion.NetworkRunner,Fusion.Sockets.NetDisconnectReason)">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> disconnects from a server or host.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnConnectRequest(Fusion.NetworkRunner,Fusion.NetworkRunnerCallbackArgs.ConnectRequest,System.Byte[])">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> receives a Connection Request from a Remote Client
            </summary>
            <param name="runner">Local NetworkRunner</param>
            <param name="request">Request information</param>
            <param name="token">Request Token</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnConnectFailed(Fusion.NetworkRunner,Fusion.Sockets.NetAddress,Fusion.Sockets.NetConnectFailedReason)">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> fails to connect to a server or host.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage(Fusion.NetworkRunner,Fusion.SimulationMessagePtr)">
            <summary>
            This callback is invoked when a manually dispatched simulation message is received from a remote peer
            </summary>
            <param name="runner">The runner this message is for</param>
            <param name="message">The message pointer</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnSessionListUpdated(Fusion.NetworkRunner,System.Collections.Generic.List{Fusion.SessionInfo})">
            <summary>
            This callback is invoked when a new List of Sessions is received from Photon Cloud
            </summary>
            <param name="runner">The runner this object exists on</param>
            <param name="sessionList">Updated list of Session</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse(Fusion.NetworkRunner,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Callback is invoked when the Authentication procedure returns a response from the Authentication Server
            </summary>
            <param name="runner">The runner this object exists on</param>
            <param name="data">Custom Authentication Reply Values</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnHostMigration(Fusion.NetworkRunner,Fusion.HostMigrationToken)">
            <summary>
            Callback is invoked when the Host Migration process has started
            </summary>
            <param name="runner">The runner this object exists on</param>
            <param name="hostMigrationToken">Migration Token that stores all necessary information to restart the Fusion Runner</param>
        </member>
        <member name="M:Fusion.NetworkRunnerUpdaterDefault.InvokeUpdate">
            <summary>
            Invokes <see cref="M:Fusion.NetworkRunner.UpdateInternal(System.Double)"/> for all the runners
            and stores them for upcoming <see cref="M:Fusion.NetworkRunner.RenderInternal"/>. 
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Fusion.NetworkRunnerUpdaterDefault.InvokeRender">
            <summary>
            Invokes <see cref="M:Fusion.NetworkRunner.RenderInternal"/> for all the runners
            that have been updaed with the last <see cref="!:InvokeUpdate(float)"/>.
            </summary>
        </member>
        <member name="T:Fusion.GameMode">
            <summary>
            Fusion Game Mode.
            
            Used to select how the local simulation will act.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Single">
            <summary>
            Single Player Mode: it works very similar to <see cref="F:Fusion.GameMode.Host"/> Mode, but don't accept any connections.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Shared">
            <summary>
            Shared Mode: starts a Game Client, which will connect to a Game Server running in the Photon Cloud using the Fusion Plugin.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Server">
            <summary>
            Server Mode: starts a Dedicated Game Server with no local player.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Host">
            <summary>
            Host Mode: starts a Game Server and allows a local player.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Client">
            <summary>
            Client Mode: starts a Game Client, which will connect to a peer in either <see cref="F:Fusion.GameMode.Server"/> or <see cref="F:Fusion.GameMode.Host"/> Modes.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.AutoHostOrClient">
            <summary>
            Automatically start as Host or Client. The first peer to connect to a room will be started as a Host, all others will connect as clients.
            </summary>
        </member>
        <member name="T:Fusion.StartGameArgs">
            <summary>
            Fusion Start Arguments, used to configure the simulation mode and other settings
            
            More about matchmaking:
            https://doc.photonengine.com/en-us/fusion/current/manual/matchmaking
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.GameMode">
            <summary>
            <see cref="T:Fusion.GameMode"/> in which this peer will start
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.SessionName">
            <summary>
            Photon Cloud Session Name used either to Create or Join a Session.
            
            Default: null (random session matching)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Address">
            <summary>
            Peer Binding Address
            
            Default: <see cref="M:Fusion.Sockets.NetAddress.Any(System.UInt16)"/>
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomPublicAddress">
            <summary>
            Custom Public Reflexive Address
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.ObjectProvider">
            <summary>
            Object pool to use
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.SceneManager">
            <summary>
            See <see cref="T:Fusion.INetworkSceneManager"/>.
            
            Default: null
            
            More about Scene Loading:
            https://doc.photonengine.com/en-us/fusion/current/manual/scene-loading
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Updater">
            <summary>
            See <see cref="T:Fusion.INetworkRunnerUpdater"/>
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.ObjectInitializer">
            <summary>
            See <see cref="T:Fusion.INetworkRunnerUpdater"/>
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Config">
            <summary>
            Custom <see cref="T:Fusion.NetworkProjectConfig"/> used to start the simulation
            
            Default: Global NetworkProjectConfig
            
            More about NetworkProjectConfig:
            https://doc.photonengine.com/en-us/fusion/current/manual/network-project-config
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.PlayerCount">
            <summary>
            Number of players allowed to connect to this peer, when running in Server/Host Mode
            
            Default: DefaultPlayers from the Global NetworkProjectConfig
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Scene">
            <summary>
            Scene that will be set as the starting Scene when running in Server/Host Mode
            
            Default: null (no scene set)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.OnGameStarted">
            <summary>
            Callback that is invoked when the Fusion has fully started
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.DisableNATPunchthrough">
            <summary>
            Flag to disable the NAT Punchthrough implementation and connect only via Relay
            
            Default: false
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomCallbackInterfaces">
            <summary>
            User defined callback interfaces we will provide O(1) constant time lookup for
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.ConnectionToken">
            <summary>
            Connection token sent by client to server. Not used in shared mode.
            
            Default: null (empty connection token)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.SessionProperties">
            <summary>
            Custom Session Properties.
            This dictionary can be used to either setup the initial Session Properties when creating a Session
            but also to set the matchmaking filters when joining a Random Session.
            
            Default: null (empty custom properties)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.IsOpen">
            <summary>
            Session should be created Open or Closed to accept joins
            
            Default: true
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.IsVisible">
            <summary>
            Session should be Visible or not in the Session Lobby list
            
            Default: true
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.MatchmakingMode">
            <summary>
            Session Join Matchmaking Mode when joining a Session.
            For more information, check <see cref="T:Fusion.Photon.Realtime.MatchmakingMode"/>
            
            Default: <see cref="F:Fusion.Photon.Realtime.MatchmakingMode.FillRoom"/>
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.UseDefaultPhotonCloudPorts">
            <summary>
            Signal if the internal Realtime Client should use the Default Photon ports to connect to the Photon Cloud.
            By default, Fusion uses ports: 27000, 27001 and 27002.
            Set this to True to use ports: 5058, 5055 and 5056.
            <seealso cref="!:https://doc.photonengine.com/fusion/current/connection-and-authentication/tcp-and-udp-port-numbers"/>
            
            Default: false (uses ports 27000, 27001 and 27002)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomLobbyName">
            <summary>
            Session Custom Lobby to be published in
            
            Default: null (default Lobby for each Session Type, LobbyClientServer or LobbyShared)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomSTUNServer">
            <summary>
            Specify a Custom STUN Server used to Resolve the peer Reflexive Addresses
            
            Default: null (no custom STUN Server)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.AuthValues">
            <summary>
            Custom Authentication Data
            
            Default: null (default authentication values)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomPhotonAppSettings">
            <summary>
            Custom Photon Application Settings
            
            Default: null (Global PhotonAppSettings)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.EnableClientSessionCreation">
            <summary>
            Enables the Session creation when starting a Client with an specific Session Name
            
            Default: false (clients *can not* create new Sessions)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.HostMigrationToken">
            <summary>
            Host Migration Token used when restarting the Fusion Simulation
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.HostMigrationResume">
            <summary>
            Callback invoked when the new Host is migrating from the old Host state
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.StartGameCancellationToken">
            <summary>
            Optional CancellationToken used to cancel the NetworkRunner start up process and shutdown
            
            Defaults: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.UseCachedRegions">
             <summary>
             Enables the usage of the previous cached regions pings. This speeds up the region ping process and the runner startup process.
            
             Defaults: false
             </summary>
        </member>
        <member name="M:Fusion.StartGameArgs.ToString">
            <summary>
            StartGameArgs ToString()
            </summary>
        </member>
        <member name="T:Fusion.StartGameException">
            <summary>
            Describe an Exception that Occurred while starting the Fusion Simulation
            </summary>
        </member>
        <member name="P:Fusion.StartGameException.ShutdownReason">
            <summary>
            ShutdownReason that caused this exception
            </summary>
        </member>
        <member name="M:Fusion.StartGameException.ToString">
            <summary>
            StartGameException to String
            </summary>
        </member>
        <member name="T:Fusion.StartGameResult">
            <summary>
            Represents the result of starting the Fusion Simulation
            </summary>
        </member>
        <member name="P:Fusion.StartGameResult.Ok">
            <summary>
            Signal if the Start was OK
            </summary>
        </member>
        <member name="P:Fusion.StartGameResult.ShutdownReason">
            <summary>
            Start Game Shutdown Reason
            </summary>
        </member>
        <member name="P:Fusion.StartGameResult.ErrorMessage">
            <summary>
            Custom Error Message filled with data about the Shutdown.
            Usually used to store custom data when the StartGame fails.
            </summary>
        </member>
        <member name="P:Fusion.StartGameResult.StackTrace">
            <summary>
            Optional Exception StackTrace 
            </summary>
        </member>
        <member name="M:Fusion.StartGameResult.ToString">
            <summary>
            StartGameResult to String
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.StartGameResult.BuildGameResultFromException(System.Exception)">
            <summary>
            Convert arbitrary Exceptions into a StartGameException to public use
            </summary>
            <param name="e">Exception to be converted</param>
            <returns>Reference to a StartGameException holding a ShutdownReason</returns>
        </member>
        <member name="M:Fusion.INetworkSceneManager.Initialize(Fusion.NetworkRunner)">
            <summary>
            Callback for initialization
            </summary>
        </member>
        <member name="M:Fusion.INetworkSceneManager.Shutdown">
            <summary>
            Callback for shutdown and clean up
            </summary>
        </member>
        <member name="P:Fusion.INetworkSceneManager.IsBusy">
            <summary>
            Signals if the <see cref="T:Fusion.INetworkSceneManager"/> instance is busy with any scene loading operations
            </summary>
        </member>
        <member name="P:Fusion.INetworkSceneManager.MainRunnerScene">
            <summary>
            The main scene of the <see cref="T:Fusion.NetworkRunner"/>. Mostly used for Multipeer logic
            </summary>
        </member>
        <member name="M:Fusion.INetworkSceneManager.IsRunnerScene(UnityEngine.SceneManagement.Scene)">
            <summary>
            Signals if the given scene is the main runner scene. Mostly used for Multipeer logic
            </summary>
        </member>
        <member name="M:Fusion.INetworkSceneManager.TryGetPhysicsScene2D(UnityEngine.PhysicsScene2D@)">
            <summary>
            Tries to get the physics scene 2D.
            </summary>
            <returns>Returns true if the operation was successfully</returns>
        </member>
        <member name="M:Fusion.INetworkSceneManager.TryGetPhysicsScene3D(UnityEngine.PhysicsScene@)">
            <summary>
            Tries to get the physics scene 3D.
            </summary>
            <returns>Returns true if the operation was successfully</returns>
        </member>
        <member name="M:Fusion.INetworkSceneManager.MakeDontDestroyOnLoad(UnityEngine.GameObject)">
            <summary>
            Mark an object as `DontDestroyOnLoad`.
            </summary>
        </member>
        <member name="M:Fusion.INetworkSceneManager.MoveGameObjectToScene(UnityEngine.GameObject,Fusion.SceneRef)">
            <summary>
            Move a <see cref="T:UnityEngine.GameObject"/> to a desired scene.
            </summary>
            <returns>Return true if the operation was successfully</returns>
        </member>
        <member name="M:Fusion.INetworkSceneManager.LoadScene(Fusion.SceneRef,Fusion.NetworkLoadSceneParameters)">
            <summary>
            Loads a given scene with the specified parameters.
            </summary>
            <returns>Returns a <see cref="T:Fusion.NetworkSceneAsyncOp"/> that can be waited</returns>
        </member>
        <member name="M:Fusion.INetworkSceneManager.UnloadScene(Fusion.SceneRef)">
            <summary>
            Unloads a given scene.
            </summary>
            <returns>Returns a <see cref="T:Fusion.NetworkSceneAsyncOp"/> that can be waited</returns>
        </member>
        <member name="M:Fusion.INetworkSceneManager.GetSceneRef(UnityEngine.GameObject)">
            <summary>
            Gets a <see cref="T:Fusion.SceneRef"/> for the scene that the given <see cref="T:UnityEngine.GameObject"/> belongs to.
            </summary>
        </member>
        <member name="M:Fusion.INetworkSceneManager.GetSceneRef(System.String)">
            <summary>
            Gets a <see cref="T:Fusion.SceneRef"/> for the given scene name or path.
            </summary>
        </member>
        <member name="M:Fusion.INetworkSceneManager.OnSceneInfoChanged(Fusion.NetworkSceneInfo,Fusion.NetworkSceneInfoChangeSource)">
            <summary>
            Implement this method and return true if you want to handle scene info changes manually. Return false if
            the default scene info change handling should be done by the <see cref="T:Fusion.NetworkRunner"/> instead.
            </summary>
            <returns>Return true if a custom handling is provided, false otherwise to use the default one</returns>
        </member>
        <member name="T:Fusion.NetworkSceneInfo">
            <summary>
            The default implementation of <see cref="!:INetworkSceneInfo"/>. Can store
            up to 8 active scenes and allows for duplicates. Each write increases <see cref="P:Fusion.NetworkSceneInfo.Version"/>
            which can be used to generate unique scene objects ids for when a scene is supposed
            to be reloaded. 
            </summary>
        </member>
        <member name="T:Fusion.NetworkSceneInfoChangeSource">
            <summary>
            What has contributed to the observed change in the scene info.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSceneObjectId.Scene">
            <summary>
            Identifies the scene in which the object is located.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSceneObjectId.ObjectId">
            <summary>
            Index of the object in the scene or any other form of unique identifier.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSceneObjectId.SceneLoadId">
            <summary>
            Unique identifier of a specific scene load. Needs to be used when loading multiple scenes with the same <see cref="T:Fusion.SceneRef"/> or reloading a scene.
            For example, <see cref="T:Fusion.NetworkSceneInfo"/> increments its internal LoadId every time a new scene is added.
            </summary>
        </member>
        <member name="T:Fusion.RenderTimeframe">
            <summary>
            Indicates which point in time (or "timeframe") networked properties should be rendered in.
            </summary>
        </member>
        <member name="F:Fusion.RenderTimeframe.Auto">
            <summary>
            The timeframe will be chosen automatically.
            </summary>
        </member>
        <member name="F:Fusion.RenderTimeframe.Local">
            <summary>
            The default timeframe for owned and predicted objects.
            </summary>
        </member>
        <member name="F:Fusion.RenderTimeframe.Remote">
            <summary>
            The default timeframe for proxied objects.
            </summary>
        </member>
        <member name="T:Fusion.RenderSource">
            <summary>
            Indicates how available snapshot data should be used to render networked properties
            (in the chosen <see cref="T:Fusion.RenderTimeframe"/>).
            </summary>
        </member>
        <member name="F:Fusion.RenderSource.Interpolated">
            <summary>
            The rendered value will come from interpolating the values at <see cref="F:Fusion.RenderSource.From"/>
            and <see cref="F:Fusion.RenderSource.To"/> to the desired point in time.
            </summary>
        </member>
        <member name="F:Fusion.RenderSource.From">
            <summary>
            The rendered value will come from the nearest available snapshot at or before the
            point in time being rendered.
            </summary>
        </member>
        <member name="F:Fusion.RenderSource.To">
            <summary>
            The rendered value will come from the nearest available snapshot ahead of the
            point in time being rendered.
            </summary>
        </member>
        <member name="F:Fusion.RenderSource.Latest">
            <summary>
            The rendered value will come from the latest snapshot.
            </summary>
        </member>
        <member name="T:Fusion.RenderTimeline">
            <summary>
            Can be used to acquire <see cref="!:RenderData"/> for different points in time.
            </summary>
        </member>
        <member name="T:Fusion.Timeline">
            <summary>
            Information used to observe an object in remote time.
            </summary>
        </member>
        <member name="T:Fusion.Simulation">
            <summary>
            Main simulation class
            </summary>
        </member>
        <member name="M:Fusion.Simulation.GetAreaOfInterestGizmoData(System.Collections.Generic.List{System.ValueTuple{UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32}})">
            <summary>
            Clears the passed results collection, and adds all current AOI cell data. Each element in the List represents one AOI cell.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Fusion.Simulation.GetObjectsAndPlayersInAreaOfInterestCell(System.Int32,System.Collections.Generic.List{Fusion.PlayerRef},System.Collections.Generic.List{Fusion.NetworkId})">
            <summary>
            Used by RunnerAOIGizmos component. Supplies data about current active AOI cells.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.LatestServerTick">
            <summary>
            latest tick on server we are aware of
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Client.LatestServerTick">
            <summary>
            latest tick on server we are aware of
            </summary>
        </member>
        <member name="P:Fusion.Simulation.TickStride">
            <summary>
            How large the ticks the current simulation takes are
            </summary>
        </member>
        <member name="P:Fusion.Simulation.TickRate">
            <summary>
            The current tick rate of the simulation
            </summary>
        </member>
        <member name="P:Fusion.Simulation.TickDeltaDouble">
            <summary>
            The delta time of each tick as a double
            </summary>
        </member>
        <member name="P:Fusion.Simulation.TickDeltaFloat">
            <summary>
            The delta time of each tick as a float
            </summary>
        </member>
        <member name="P:Fusion.Simulation.SendRate">
            <summary>
            The packet send rate 
            </summary>
        </member>
        <member name="P:Fusion.Simulation.SendDelta">
            <summary>
            The packet send delta time
            </summary>
        </member>
        <member name="P:Fusion.Simulation.DeltaTime">
            <summary>
            Gets the fixed tick time interval. Derived from the <see cref="!:SimulationConfig.TickRate"/>.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsShutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.Simulation.LocalAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsResimulation">
            <summary>
            Use inside of FixedUpdateNetwork to determine if the tick currently being simulated has previously been simulated locally.
            Resimulation occurs in client prediction when new states arrive from the StateAuthority. 
            Networked objects are set to the most current authority state tick, and simulations are repeated from that tick to the local current tick.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsLastTick">
            <summary>
            Use in conjunction with IsResimulation/IsForward inside of FixedUpdateNetwork to determine if the current tick being simulated 
            is the last tick of the resimulation or forward phase of the simulation loop.
            <para>
            'Resimulation' describes simulating a tick that has been previously been simulated.<br></br> 
            'Forward' describes simulating a tick that is being simulated for the first time locally.<br></br>
            'Prediction' describes simulating ticks higher than the most current known StateAuthority snapshot tick.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsFirstTick">
            <summary>
            Use in conjunction with IsResimulation/IsForward inside of FixedUpdateNetwork to determine if the current tick being simulated 
            is the first tick of the resimulation or forward phase of the simulation loop.
            <para>
            'Resimulation' describes simulating a tick that has been previously been simulated.<br></br> 
            'Forward' describes simulating a tick that is being simulated for the first time locally.<br></br>
            'Prediction' describes simulating ticks higher than the most current known StateAuthority snapshot tick.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsForward">
            <summary>
            Use inside of FixedUpdateNetwork to determine if the tick currently being simulated has NOT previously been simulated locally.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsLocalPlayerFirstExecution">
            <summary>
            True if the current stage of the simulation loop is Forward. False during resimulations.
            <para>
            'Resimulation' describes simulating a tick that has been previously been simulated.<br></br> 
            'Forward' describes simulating a tick that is being simulated for the first time locally.<br></br>
            'Prediction' describes simulating ticks higher than the most current known StateAuthority snapshot tick.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Tick">
            <summary>
            The tick associated with the current state of networked objects, or the current simulation tick being processed (when evaluated during FixedUpdateNetwork).
            </summary>
        </member>
        <member name="P:Fusion.Simulation.TickPrevious">
            <summary>
            The previous tick
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Topology">
            <summary>
            Indicates if a Server/Client or Shared Mode (relay server) topology is being used.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Mode">
            <summary>
            Gets the <see cref="T:Fusion.SimulationModes"/> flags for The type of network peer this simulation represents.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Stage">
            <summary>
            Gets the current <see cref="T:Fusion.SimulationStages"/> value.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Config">
            <summary>
            The <see cref="T:Fusion.SimulationConfig"/> file used by this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.ProjectConfig">
            <summary>
            The <see cref="T:Fusion.NetworkProjectConfig"/> file used by this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsClient">
            <summary>
            If this peer is a client. True for client peers in Server/Client topologies, and true for all peers in Shared Mode.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsServer">
            <summary>
            If this peer is the server. True for the Server or Host peer in Server/Client topologies, and always false for all peers in Shared Mode (the relay is the server). 
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsPlayer">
            <summary>
            True for any peer that represents a human player. This is true for all peers except a dedicated server.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsSinglePlayer">
            <summary>
            Indicates that this simulation is operating in Single Player mode, which is a Host that accepts no connections.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsMasterClient">
            <summary>
            Only valid in Shared Mode. Indicates if this peer is flagged as the MasterClient, which means it is default StateAuthority
            </summary>
        </member>
        <member name="P:Fusion.Simulation.ActivePlayers">
            <summary>
            List of Active players in the Simulation
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsRunning">
            <summary>
            Signal if the Simulation is currently running
            </summary>
        </member>
        <member name="P:Fusion.Simulation.LocalAddress">
            <summary>
            Bound Address of the internal socket
            </summary>
        </member>
        <member name="M:Fusion.Simulation.SetPlayerAlwaysInterested(Fusion.PlayerRef,Fusion.NetworkId,System.Boolean)">
            <summary>
            Add or remove specific player interest in a NetworkObject.
            <para>
            <see cref="!:SimulationConfig.ReplicationMode"/> must be set to <see cref="!:SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </para>
            </summary>
        </member>
        <member name="M:Fusion.Simulation.GetPlayerConnectionToken(Fusion.PlayerRef)">
            <summary>
            Return a copy if a Player's Connection Token
            </summary>
            <param name="player">Player to check for the Connection Token</param>
            <returns>Connection Token Copy</returns>
        </member>
        <member name="M:Fusion.Simulation.GetPlayerAddress(Fusion.PlayerRef)">
            <summary>
            Return the Address of a remote Player
            </summary>
            <param name="player">Player to check for the NetAddress</param>
            <returns>NetAddress of a specific player</returns>
        </member>
        <member name="M:Fusion.Simulation.GetPlayerUniqueId(Fusion.PlayerRef)">
            <summary>
            Return the UniqueId as a long from a specific Player
            </summary>
            <param name="player">Player to check for the UniqueId</param>
            <returns>UniqueId of a specific Player</returns>
        </member>
        <member name="M:Fusion.Simulation.HasAnyActiveConnections">
            <summary>
            Signal if the Server has any Active Connection with any number of Clients.
            </summary>
            <returns>True, if at least one connection is active, false otherwise.</returns>
        </member>
        <member name="M:Fusion.Simulation.Update(System.Double)">
            <summary>
            Forwards the Simulation based on the Delta Time
            </summary>
            <param name="dt">Delta Time used to forward the simulation</param>
            <returns>How many Ticks executed on this Update</returns>
        </member>
        <member name="M:Fusion.Simulation.SendMessageInternal(Fusion.SimulationMessage*,Fusion.Sockets.NetConnection*)">
            <summary>
            Enqueue a <see cref="T:Fusion.SimulationMessage"/> on the Out Message List for a specific <see cref="T:Fusion.Sockets.NetConnection"/>
            </summary>
            <param name="message">Message to enqueue</param>
            <param name="netConnection">Target Connection</param>
        </member>
        <member name="M:Fusion.Simulation.Server.Disconnect(Fusion.Sockets.NetAddress)">
            <summary>
            Disconnect a client based on it's NetAddress
            </summary>
            <param name="address">Client Adress to Disconnect</param>
        </member>
        <member name="M:Fusion.Simulation.Server.DisposeHostMigration">
            <summary>
            Dispose Host Migration data
            </summary>
        </member>
        <member name="M:Fusion.Simulation.Server.ProcessHostMigrationData(System.Byte[],System.Collections.Generic.Dictionary{Fusion.NetworkId,Fusion.NetworkObjectHeaderSnapshot},Fusion.Allocator*)">
            <summary>
            Process the serialized data from the bytebuffer into a organized Dictionary of NetIDs=NO Snapshots
            </summary>
            <param name="data">Data buffer to read the data from</param>
            <param name="networkObjectMap">Target dictionary that will be filled with NetworkObjects data</param>
            <param name="allocator">Allocator used to create new <see cref="T:Fusion.NetworkObjectHeaderSnapshot"/></param>
        </member>
        <member name="T:Fusion.RpcSendMessageResult">
            <summary>
            Result flags for the RPC message send operation.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.SentToServerForForwarding">
            <summary>
            Client sent to the server, server will send to the target client.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.SentToTargetClient">
            <summary>
            Server sent to a specific client (a targeted message).
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.SentBroadcast">
            <summary>
            Server attempted to send to all the clients and at least one succeeded.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentTargetObjectNotConfirmed">
            <summary>
            Target object not confirmed on the client.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentTargetObjectNotInPlayerInterest">
            <summary>
            Target object not in client's interest. Likely due to being outside of player's AOI region, or needs to be explicitly set as always interested.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentTargetClientNotAvailable">
            <summary>
            Target client not connected (a targeted message).
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentBroadcastNoActiveConnections">
            <summary>
            Server attempted to send to all the clients, but none was connected.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentBroadcastNoConfirmedNorInterestedClients">
            <summary>
            Server attempted to send to all the clients, but the target object is not confirmed/not in Object Interest for all target clients.
            </summary>
        </member>
        <member name="T:Fusion.Topologies">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.Topologies.ClientServer">
            <summary>
            Classic server and client model
            </summary>
        </member>
        <member name="F:Fusion.Topologies.Shared">
            <summary>
            Relay based shared world model
            </summary>
        </member>
        <member name="T:Fusion.SimulationConfig">
            <summary>
            Project configuration settings specific to how the Simulation class behaves.
            </summary>
        </member>
        <member name="T:Fusion.SimulationConfig.InputTransferModes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.InputTransferModes.Redundancy">
            <summary>
            Send delta compressed and redundant input, used for most games
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.InputTransferModes.LatestState">
            <summary>
            Only send latest input state, useful for VR, etc. 
            </summary>
        </member>
        <member name="T:Fusion.SimulationConfig.DataConsistency">
            <summary>
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.DataConsistency.Full">
            <summary>
            <para>
            When a <see cref="T:Fusion.NetworkBehaviour"/>'s data changes, the server will send all properties
            whose changes have not been acknowledged.
            </para>
            
            <para>
            This option consumes more bandwidth, but guarantees that each <see cref="T:Fusion.NetworkBehaviour"/>
            has consistent state.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.DataConsistency.Eventual">
            <summary>
            <para>
            When a <see cref="T:Fusion.NetworkBehaviour"/>'s data changes, the server will only send the newly
            changed properties.
            </para>
            
            <para>
            This option consumes less bandwidth, but a <see cref="T:Fusion.NetworkBehaviour"/> may have
            inconsistent state at times (some properties up-to-date but not others).
            </para>
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.InputDataWordCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.SceneInfoWordCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.ReplicationFeatures">
            <summary>
            Features to enabled to replication such as area of interest, etc. 
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.InputTransferMode">
            <summary>
            The way which input is transferred
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.ObjectDataConsistency">
            <summary>
            How the server chooses to send <see cref="T:Fusion.NetworkObject"/> updates to balance consistency and bandwidth consumption.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.PlayerCount">
            <summary>
            The default number of players allowed to join a game instance. Can also be changed in code when starting Fusion.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.Topology">
            <summary>
            The topology used
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.HostMigration">
            <summary>
            If, in host mode, we should allow host migration if the current host leaves.
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.InputTotalWordCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fusion.SimulationConfig.Init(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fusion.HeapConfiguration">
            <summary>
            Memory Heap Settings
            </summary>
        </member>
        <member name="F:Fusion.HeapConfiguration.PageShift">
            <summary>
            Default size of each Heap Page
            </summary>
        </member>
        <member name="F:Fusion.HeapConfiguration.PageCount">
            <summary>
            Default number of Heap Pages
            </summary>
        </member>
        <member name="F:Fusion.HeapConfiguration.GlobalsSize">
            <summary>
            Heap Global Size
            </summary>
        </member>
        <member name="M:Fusion.HeapConfiguration.Init(System.Int32)">
            <summary>
            Initializes and creates a new <see cref="T:Fusion.HeapConfiguration"/> based on the Global Size
            </summary>
        </member>
        <member name="M:Fusion.HeapConfiguration.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:Fusion.NetworkConfiguration">
            <summary>
            Main network configuration class.
            </summary>
        </member>
        <member name="T:Fusion.NetworkConfiguration.ReliableDataTransfers">
            <summary>
            Flag for allowed Reliable Data transfer modes.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ReliableDataTransfers.ClientToServer">
            <summary>
            Allow Client to Server.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ReliableDataTransfers.ClientToClientWithServerProxy">
            <summary>
            Allow Client to Client using Server as Proxy.
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.SocketSendBufferSize">
            <summary>
            Size in Kilobytes of the underlying socket send buffer.
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.SocketRecvBufferSize">
            <summary>
            Size in Kilobytes of the underlying socket receive buffer.
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.ConnectAttempts">
            <summary>
            Max number of connection attempts that a Client will run when trying to connect to a remote Server.
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.ConnectInterval">
            <summary>
            Interval in seconds between each connection attempt from a Client.
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.ConnectionDefaultRtt">
            <summary>
            Default assumed RTT in seconds for new connections (before actual RTT has been determined). The real RTT is calculated over time once the connection is established.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectionTimeout">
            <summary>
            Max allowed time in seconds that the local peer can run without receiving any update from a remote peer.
            If a client does not receive any update from the server within this period, it will disconnect itself.
            If a server does not receive any update from a remote client within this period, it will disconnect that particular client.
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.ConnectionPingInterval">
            <summary>
            Interval in seconds between PING messages sent to a remote connection, in order to keep that connection alive.
            </summary>
            <remarks>Currently unused.</remarks>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectionShutdownTime">
            <summary>
            Default delay between connection changes status to Shutdown (disconnected/invalid), and it actually being released (freeing all references to that particular connection).
            </summary>
        </member>
        <member name="P:Fusion.NetworkConfiguration.MtuDefault">
            <summary>
            Max number of bytes that can be used by Fusion to fill up a UDP package.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ReliableDataTransferModes">
            <summary>
            Current <see cref="F:Fusion.NetworkConfiguration.ReliableDataTransferModes"/> mode.
            </summary>
        </member>
        <member name="M:Fusion.NetworkConfiguration.Init">
            <summary>
            Initializes and creates a copy of this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkConfiguration.ToNetConfig(Fusion.Sockets.NetAddress)">
            <summary>
            Convert this <see cref="T:Fusion.NetworkProjectConfig"/> into a <see cref="T:Fusion.Sockets.NetConfig"/> using the <see cref="T:Fusion.Sockets.NetAddress"/> as reference.
            </summary>
        </member>
        <member name="T:Fusion.NetworkSimulationConfiguration">
            <summary>
            Configuration for network conditions simulation (induced latency and loss).
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.Enabled">
            <summary>
            If adverse network conditions are being simulated.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayShape">
            <summary>
            The pattern used to oscillate between <see cref="F:Fusion.NetworkSimulationConfiguration.DelayMin"/> and <see cref="F:Fusion.NetworkSimulationConfiguration.DelayMax"/> values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayMin">
            <summary>
            The lowest packet delay value returned from the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayMax">
            <summary>
            The highest packet delay value returned from the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayPeriod">
            <summary>
            The period of the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator (the rate at which delay oscillates in seconds).
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayThreshold">
            <summary>
            The <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillates between 0 and 1. Values below this threshold are reduced to zero, resulting in a value equal to <see cref="F:Fusion.NetworkSimulationConfiguration.DelayMin"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.AdditionalJitter">
            <summary>
            After the delay value from the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator is determined, random 0 to this value of additional seconds be added to the packet latency.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceShape">
            <summary>
            The pattern used to oscillate between <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMin"/> and <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMax"/> values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceMin">
            <summary>
            The lowest loss chance value the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillator will produce. 0 = 0% chance of being lost. 1 = 100% chance of being lost.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceMax">
            <summary>
            The highest loss chance value the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillator will produce. 0 = 0% chance of being lost. 1 = 100% chance of being lost.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceThreshold">
            <summary>
            The <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> wave oscillates between 0 and 1. Values below this threshold are reduced to zero, resulting in a value equal to <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMin"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChancePeriod">
            <summary>
            The period of the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillator (the rate at which delay oscillates between <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMin"/> and <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMax"/>).
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.AdditionalLoss">
            <summary>
            After the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillation loss chance is calculated, an additional random value of 0 to this (normalized) percentage of loss chance is added.
            </summary>
        </member>
        <member name="F:Fusion.TimeSyncConfiguration.MaxLateInputs">
            <summary>
            <para>The maximum amount (%) of inputs allowed to arrive late because of jitter.</para>
            <para>Determines the minimum target simulation offset.</para>
            </summary>
        </member>
        <member name="F:Fusion.TimeSyncConfiguration.ExtraSimulationOffset">
            <summary>
            <para>Increases the target simulation offset by a fixed duration.</para>
            <para>This is effectively how many extra chances inputs have to reach the server in time.</para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.MaxSimulationAccel">
            <summary>
            <para>The maximum amount (%) a client's simulation can speed up or slow down
            to maintain its target simulation offset.</para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.SimAccelPropBand">
            <summary>
            <para>
            Controls the range where the client's simulation speed scales linearly with the
            simulation offset error (until it maxes out at <see cref="P:Fusion.TimeSyncConfiguration.MaxSimulationAccel"/>)."
            </para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.SimulationAccelDeadzone">
            <summary>
            <para>
            A client's simulation will only speed up or slow down if its simulation offset
            is off-target by more than this amount (%).
            </para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.SimulationResetThreshold">
            <summary>
            <para>
            A client will reset its simulation state if its simulation offset
            is off-target by more than this amount (%).
            </para>
            </summary>
        </member>
        <member name="F:Fusion.TimeSyncConfiguration.MaxLateSnapshots">
            <summary>
            <para>The maximum amount (%) of snapshots allowed to arrive late because of jitter.</para>
            <para>Determines the minimum target interpolation delay.</para>
            </summary>
        </member>
        <member name="F:Fusion.TimeSyncConfiguration.ExtraInterpolationOffset">
            <summary>
            <para>Increases the target interpolation delay by a fixed duration.</para>
            <para>This is effectively how many extra chances clients have to receive new snapshots in time.</para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.MaxInterpolationAccel">
            <summary>
            <para>
            The maximum amount (%) that remote object interpolation on the client can speed up or slow down
            to maintain its target interpolation delay.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.InterpAccelPropBand">
            <summary>
            <para>
            Controls the range where the client's interpolation speed scales linearly with the
            interpolation delay error (until it maxes out at <see cref="P:Fusion.TimeSyncConfiguration.MaxInterpolationAccel"/>)."
            </para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.InterpolationAccelDeadzone">
            <summary>
            <para>
            Remote object interpolation on the client will only speed up or slow down if its delay
            is off-target by more than this amount (%).
            </para>
            </summary>
        </member>
        <member name="P:Fusion.TimeSyncConfiguration.InterpolationResetThreshold">
            <summary>
            <para>
            A client will reset its interpolation state if its interpolation delay
            is off-target by more than this percentage.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.RoundTripTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InPacketsRecv">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InPacketsBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutPacketsSent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutPacketsLost">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutPacketsDelivered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutPacketsBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InObjectBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InObjectUpdatesPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InObjectDestroysPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutObjectBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutObjectUpdatesPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutObjectDestroysPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InMessagesBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InMessagesPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutMessagesBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutMessagesPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InputsBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InputsPerPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InputsMissing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.InReliableDataBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConnectionStats.OutReliableDataBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationMessage.Capacity">
            <summary>
            Capacity in Bits of this <see cref="T:Fusion.SimulationMessage"/>
            </summary>
        </member>
        <member name="F:Fusion.SimulationMessage.Offset">
            <summary>
            Current offset in Bits
            </summary>
        </member>
        <member name="M:Fusion.SimulationMessage.Allocate(Fusion.Simulation,System.Int32)">
            <summary>
            Allocate a new <see cref="T:Fusion.SimulationMessage"/>
            </summary>
            <param name="sim">Simulation to get the Memory from</param>
            <param name="capacityInBytes">Size in bytes of the new <see cref="T:Fusion.SimulationMessage"/></param>
            <returns></returns>
        </member>
        <member name="T:Fusion.SimulationModes">
            <summary>
            Flags for The type of network peer a simulation represents.
            </summary>
        </member>
        <member name="F:Fusion.SimulationModes.Server">
            <summary>
            Simulation represents a server peer, with no local player.
            </summary>
        </member>
        <member name="F:Fusion.SimulationModes.Host">
            <summary>
            Simulation represents a server peer, with a local player.
            </summary>
        </member>
        <member name="F:Fusion.SimulationModes.Client">
            <summary>
            Simulation represents a client peer, with a local player.
            </summary>
        </member>
        <member name="T:Fusion.SimulationRuntimeConfig">
            <summary>
            Stores the runtime configuration of the simulation
            </summary>
        </member>
        <member name="F:Fusion.SimulationRuntimeConfig.TickRate">
            <summary>
            Current tick rates and send rates for server and client 
            </summary>
        </member>
        <member name="F:Fusion.SimulationRuntimeConfig.ServerMode">
            <summary>
            Current Simulation Mode
            </summary>
        </member>
        <member name="F:Fusion.SimulationRuntimeConfig.PlayerMaxCount">
            <summary>
            Current player count
            </summary>
        </member>
        <member name="F:Fusion.SimulationRuntimeConfig.MasterClient">
            <summary>
            Current master client (in shared mode)
            </summary>
        </member>
        <member name="F:Fusion.SimulationRuntimeConfig.HostPlayer">
            <summary>
            Current master client (in shared mode)
            </summary>
        </member>
        <member name="F:Fusion.SimulationRuntimeConfig.Topology">
            <summary>
            Current master client (in shared mode)
            </summary>
        </member>
        <member name="T:Fusion.SimulationStages">
            <summary>
            Flags for which stage the simulation currently running. Forward is when a tick is being simulated for the first time.
            Resimulate is when a tick is being simulated again with corrections.
            </summary>
        </member>
        <member name="F:Fusion.SimulationStages.Forward">
            <summary>
            Currently simulating a tick for the first time.
            </summary>
        </member>
        <member name="F:Fusion.SimulationStages.Resimulate">
            <summary>
            Currently simulating a previously simulated tick again, with state corrections.
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.TimeResets">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.Resimulations">
            <summary>
            The number of re-simulations per Fusion simulation loop cycle.
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.ForwardSteps">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.EngineDelta">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.SpawnQueueSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.RoundTripTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.PlayersCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.OutPackets">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.OutBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InPackets">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.ObjectsCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.ObjectsGlobalCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.ObjectsPredictedCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.SimulationSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.SimulationTimeOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.SimulationTimeOffsetTarget">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.SimulationTimeOffsetDeviation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InputReceiveDelta">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InputReceiveDeltaDeviation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.StateReceiveDelta">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.StateReceiveDeltaDeviation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InterpolationSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InterpolationOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InterpolationOffsetTarget">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationStats.InterpolationOffsetDeviation">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
